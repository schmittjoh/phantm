
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 21 17:06:03 CET 2013
//----------------------------------------------------

package phantm.parser;

import java_cup.runtime.*;
import java.util.Stack;
import java.io.*;
import java.net.URL;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 21 17:06:03 CET 2013
  */
public class CUPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CUPParser() {
     super();
    load_tables();
  }

  /** Constructor which sets the default scanner. */
  public CUPParser(java_cup.runtime.Scanner s) {
     super(s);
     load_tables();
  }

  /** Constructor which sets the default scanner. */
  public CUPParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
     super(s, sf);
     load_tables();
  }

  /** Load the tables from files. */
  public void load_tables() {
    try {
      InputStream is = getClass().getClassLoader().getResourceAsStream("tables/production_table.bin");
      if (is == null) {
        is = new FileInputStream("src/main/java/phantm/parser/production_table.bin");
      }
      ObjectInputStream ois = new ObjectInputStream(is);
      this._production_table = (short[][]) ois.readObject();
      ois.close();
    } catch (Exception e) {
      e.printStackTrace();
    }
    try {
      InputStream is = getClass().getClassLoader().getResourceAsStream("tables/action_table.bin");
      if (is == null) {
        is = new FileInputStream("src/main/java/phantm/parser/action_table.bin");
      }
      ObjectInputStream ois = new ObjectInputStream(is);
      this._action_table = (short[][]) ois.readObject();
      ois.close();
    } catch (Exception e) {
      e.printStackTrace();
    }
    try {
      InputStream is = getClass().getClassLoader().getResourceAsStream("tables/reduce_table.bin");
      if (is == null) {
        is = new FileInputStream("src/main/java/phantm/parser/reduce_table.bin");
      }
      ObjectInputStream ois = new ObjectInputStream(is);
      this._reduce_table = (short[][]) ois.readObject();
      ois.close();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  /** Production table. */
  protected static short _production_table[][];

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static short[][] _action_table;

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static short[][] _reduce_table;

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CUPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CUPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CUPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

    // the name of the parsed file
    private String fileName;

    public void user_init() {
        // retrieve the name of the parsed file from the lexer
        this.fileName = ((Lexer) getScanner()).getFileName();
    }

    public String getFileName() {
        return this.fileName;
    }

    // override report_error from base class lr_parser
    public void report_error(String message, Object info) {
        System.err.print(message+": ");
        if (info instanceof Symbol) {
            Symbol infoSym = (Symbol) info;
            ParseNode node = (ParseNode) infoSym.value;
            System.err.print("unexpected "+node.name());
            if (infoSym.left != -1) {
                System.err.println(" at line " + node.line()+":"+node.column());
            } else {
                System.err.println(" at unknown line");
            }
        }
    }

    // override report_error from base class lr_parser;
    // does the same as the original, but doesn't call report_error again
    public void report_fatal_error(String message, Object info)
    throws java.lang.Exception {
        // stop parsing (not really necessary since we throw an exception)
        done_parsing();

        // throw an exception
        throw new Exception("Can't recover from previous error(s)");
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CUPParser$actions {



    private ParseNode createParseNode(String name, int num, Stack stack, int size, int top) {
        ParseNode node = new ParseNode(num, name);
        for (int i = size-1; i >= 0; i--) {
            node.newChildrenIs((ParseNode)((java_cup.runtime.Symbol)stack.elementAt(top-i)).value);
        }
        return node;
    }

  private final CUPParser parser;

  /** Constructor */
  CUP$CUPParser$actions(CUPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CUPParser$do_action(
    int                        CUP$CUPParser$act_num,
    java_cup.runtime.lr_parser CUP$CUPParser$parser,
    java.util.Stack            CUP$CUPParser$stack,
    int                        CUP$CUPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CUPParser$result;

      /* select the action based on the action number */
      switch (CUP$CUPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // class_constant ::= reference_variable T_DOUBLE_COLON T_STRING 
            {
              ParseNode RESULT = createParseNode("class_constant",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("class_constant",11, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // class_constant ::= class_name T_DOUBLE_COLON T_STRING 
            {
              ParseNode RESULT = createParseNode("class_constant",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("class_constant",11, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // isset_variables ::= isset_variables T_COMMA variable 
            {
              ParseNode RESULT = createParseNode("isset_variables",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("isset_variables",57, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // isset_variables ::= variable 
            {
              ParseNode RESULT = createParseNode("isset_variables",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("isset_variables",57, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // internal_functions_in_yacc ::= T_REQUIRE_ONCE expr 
            {
              ParseNode RESULT = createParseNode("internal_functions_in_yacc",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",55, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // internal_functions_in_yacc ::= T_REQUIRE expr 
            {
              ParseNode RESULT = createParseNode("internal_functions_in_yacc",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",55, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // internal_functions_in_yacc ::= T_EVAL T_OPEN_BRACES expr T_CLOSE_BRACES 
            {
              ParseNode RESULT = createParseNode("internal_functions_in_yacc",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",55, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // internal_functions_in_yacc ::= T_INCLUDE_ONCE expr 
            {
              ParseNode RESULT = createParseNode("internal_functions_in_yacc",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",55, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // internal_functions_in_yacc ::= T_INCLUDE expr 
            {
              ParseNode RESULT = createParseNode("internal_functions_in_yacc",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",55, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // internal_functions_in_yacc ::= T_EMPTY T_OPEN_BRACES variable T_CLOSE_BRACES 
            {
              ParseNode RESULT = createParseNode("internal_functions_in_yacc",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",55, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // internal_functions_in_yacc ::= T_ISSET T_OPEN_BRACES isset_variables T_CLOSE_BRACES 
            {
              ParseNode RESULT = createParseNode("internal_functions_in_yacc",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",55, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // encaps_var_offset ::= T_VARIABLE 
            {
              ParseNode RESULT = createParseNode("encaps_var_offset",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",34, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // encaps_var_offset ::= T_NUM_STRING 
            {
              ParseNode RESULT = createParseNode("encaps_var_offset",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",34, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // encaps_var_offset ::= T_STRING 
            {
              ParseNode RESULT = createParseNode("encaps_var_offset",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",34, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // encaps_var ::= T_CURLY_OPEN variable T_CLOSE_CURLY_BRACES 
            {
              ParseNode RESULT = createParseNode("encaps_var",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("encaps_var",33, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_OPEN_RECT_BRACES expr T_CLOSE_RECT_BRACES T_CLOSE_CURLY_BRACES 
            {
              ParseNode RESULT = createParseNode("encaps_var",CUP$CUPParser$act_num, CUP$CUPParser$stack, 6, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("encaps_var",33, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-5)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr T_CLOSE_CURLY_BRACES 
            {
              ParseNode RESULT = createParseNode("encaps_var",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("encaps_var",33, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_CLOSE_CURLY_BRACES 
            {
              ParseNode RESULT = createParseNode("encaps_var",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("encaps_var",33, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // encaps_var ::= T_VARIABLE T_OBJECT_OPERATOR T_STRING 
            {
              ParseNode RESULT = createParseNode("encaps_var",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("encaps_var",33, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // encaps_var ::= T_VARIABLE T_OPEN_RECT_BRACES encaps_var_offset T_CLOSE_RECT_BRACES 
            {
              ParseNode RESULT = createParseNode("encaps_var",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("encaps_var",33, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // encaps_var ::= T_VARIABLE 
            {
              ParseNode RESULT = createParseNode("encaps_var",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("encaps_var",33, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // encaps_list ::= T_ENCAPSED_AND_WHITESPACE encaps_var 
            {
              ParseNode RESULT = createParseNode("encaps_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("encaps_list",32, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // encaps_list ::= encaps_var 
            {
              ParseNode RESULT = createParseNode("encaps_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("encaps_list",32, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE 
            {
              ParseNode RESULT = createParseNode("encaps_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("encaps_list",32, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // encaps_list ::= encaps_list encaps_var 
            {
              ParseNode RESULT = createParseNode("encaps_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("encaps_list",32, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // non_empty_array_pair_list ::= T_BITWISE_AND variable 
            {
              ParseNode RESULT = createParseNode("non_empty_array_pair_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",68, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW T_BITWISE_AND variable 
            {
              ParseNode RESULT = createParseNode("non_empty_array_pair_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",68, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA T_BITWISE_AND variable 
            {
              ParseNode RESULT = createParseNode("non_empty_array_pair_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",68, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW T_BITWISE_AND variable 
            {
              ParseNode RESULT = createParseNode("non_empty_array_pair_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 6, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",68, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-5)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // non_empty_array_pair_list ::= expr 
            {
              ParseNode RESULT = createParseNode("non_empty_array_pair_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",68, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW expr 
            {
              ParseNode RESULT = createParseNode("non_empty_array_pair_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",68, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr 
            {
              ParseNode RESULT = createParseNode("non_empty_array_pair_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",68, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW expr 
            {
              ParseNode RESULT = createParseNode("non_empty_array_pair_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 5, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",68, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // array_pair_list ::= non_empty_array_pair_list possible_comma 
            {
              ParseNode RESULT = createParseNode("array_pair_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("array_pair_list",3, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // array_pair_list ::= 
            {
              ParseNode RESULT = createParseNode("array_pair_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 0, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("array_pair_list",3, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // assignment_list_element ::= 
            {
              ParseNode RESULT = createParseNode("assignment_list_element",CUP$CUPParser$act_num, CUP$CUPParser$stack, 0, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",5, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // assignment_list_element ::= T_LIST T_OPEN_BRACES assignment_list T_CLOSE_BRACES 
            {
              ParseNode RESULT = createParseNode("assignment_list_element",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",5, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // assignment_list_element ::= variable 
            {
              ParseNode RESULT = createParseNode("assignment_list_element",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",5, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // assignment_list ::= assignment_list_element 
            {
              ParseNode RESULT = createParseNode("assignment_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("assignment_list",4, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // assignment_list ::= assignment_list T_COMMA assignment_list_element 
            {
              ParseNode RESULT = createParseNode("assignment_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("assignment_list",4, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // simple_indirect_reference ::= simple_indirect_reference T_DOLLAR 
            {
              ParseNode RESULT = createParseNode("simple_indirect_reference",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("simple_indirect_reference",82, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // simple_indirect_reference ::= T_DOLLAR 
            {
              ParseNode RESULT = createParseNode("simple_indirect_reference",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("simple_indirect_reference",82, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // variable_name ::= T_OPEN_CURLY_BRACES expr T_CLOSE_CURLY_BRACES 
            {
              ParseNode RESULT = createParseNode("variable_name",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("variable_name",96, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // variable_name ::= T_STRING 
            {
              ParseNode RESULT = createParseNode("variable_name",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("variable_name",96, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // object_dim_list ::= variable_name 
            {
              ParseNode RESULT = createParseNode("object_dim_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",74, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // object_dim_list ::= object_dim_list T_OPEN_CURLY_BRACES expr T_CLOSE_CURLY_BRACES 
            {
              ParseNode RESULT = createParseNode("object_dim_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",74, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // object_dim_list ::= object_dim_list T_OPEN_RECT_BRACES dim_offset T_CLOSE_RECT_BRACES 
            {
              ParseNode RESULT = createParseNode("object_dim_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",74, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // object_property ::= variable_without_objects 
            {
              ParseNode RESULT = createParseNode("object_property",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("object_property",75, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // object_property ::= object_dim_list 
            {
              ParseNode RESULT = createParseNode("object_property",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("object_property",75, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // dim_offset ::= expr 
            {
              ParseNode RESULT = createParseNode("dim_offset",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("dim_offset",26, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // dim_offset ::= 
            {
              ParseNode RESULT = createParseNode("dim_offset",CUP$CUPParser$act_num, CUP$CUPParser$stack, 0, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("dim_offset",26, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // compound_variable ::= T_DOLLAR T_OPEN_CURLY_BRACES expr T_CLOSE_CURLY_BRACES 
            {
              ParseNode RESULT = createParseNode("compound_variable",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("compound_variable",21, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // compound_variable ::= T_VARIABLE 
            {
              ParseNode RESULT = createParseNode("compound_variable",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("compound_variable",21, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // reference_variable ::= compound_variable 
            {
              ParseNode RESULT = createParseNode("reference_variable",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("reference_variable",80, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // reference_variable ::= reference_variable T_OPEN_CURLY_BRACES expr T_CLOSE_CURLY_BRACES 
            {
              ParseNode RESULT = createParseNode("reference_variable",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("reference_variable",80, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // reference_variable ::= reference_variable T_OPEN_RECT_BRACES dim_offset T_CLOSE_RECT_BRACES 
            {
              ParseNode RESULT = createParseNode("reference_variable",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("reference_variable",80, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // base_variable ::= static_member 
            {
              ParseNode RESULT = createParseNode("base_variable",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("base_variable",7, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // base_variable ::= simple_indirect_reference reference_variable 
            {
              ParseNode RESULT = createParseNode("base_variable",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("base_variable",7, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // base_variable ::= reference_variable 
            {
              ParseNode RESULT = createParseNode("base_variable",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("base_variable",7, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // base_variable_with_function_calls ::= function_call 
            {
              ParseNode RESULT = createParseNode("base_variable_with_function_calls",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",8, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // base_variable_with_function_calls ::= base_variable 
            {
              ParseNode RESULT = createParseNode("base_variable_with_function_calls",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",8, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // static_member ::= reference_variable T_DOUBLE_COLON variable_without_objects 
            {
              ParseNode RESULT = createParseNode("static_member",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("static_member",86, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // static_member ::= class_name T_DOUBLE_COLON variable_without_objects 
            {
              ParseNode RESULT = createParseNode("static_member",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("static_member",86, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // variable_without_objects ::= simple_indirect_reference reference_variable 
            {
              ParseNode RESULT = createParseNode("variable_without_objects",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("variable_without_objects",99, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // variable_without_objects ::= reference_variable 
            {
              ParseNode RESULT = createParseNode("variable_without_objects",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("variable_without_objects",99, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // method_or_not ::= 
            {
              ParseNode RESULT = createParseNode("method_or_not",CUP$CUPParser$act_num, CUP$CUPParser$stack, 0, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("method_or_not",63, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // method_or_not ::= T_OPEN_BRACES function_call_parameter_list T_CLOSE_BRACES 
            {
              ParseNode RESULT = createParseNode("method_or_not",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("method_or_not",63, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // variable_property ::= T_OBJECT_OPERATOR object_property method_or_not 
            {
              ParseNode RESULT = createParseNode("variable_property",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("variable_property",98, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // variable_properties ::= 
            {
              ParseNode RESULT = createParseNode("variable_properties",CUP$CUPParser$act_num, CUP$CUPParser$stack, 0, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("variable_properties",97, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // variable_properties ::= variable_properties variable_property 
            {
              ParseNode RESULT = createParseNode("variable_properties",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("variable_properties",97, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // variable ::= base_variable_with_function_calls 
            {
              ParseNode RESULT = createParseNode("variable",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("variable",79, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // variable ::= base_variable_with_function_calls T_OBJECT_OPERATOR object_property method_or_not variable_properties 
            {
              ParseNode RESULT = createParseNode("variable",CUP$CUPParser$act_num, CUP$CUPParser$stack, 5, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("variable",79, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // expr ::= T_FUNCTION is_reference T_OPEN_BRACES parameter_list T_CLOSE_BRACES lexical_vars T_OPEN_CURLY_BRACES inner_statement_list T_CLOSE_CURLY_BRACES 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 9, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-8)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // expr ::= T_PRINT expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // expr ::= T_BACKTICK backticks_expr T_BACKTICK 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // expr ::= T_ARRAY T_OPEN_BRACES array_pair_list T_CLOSE_BRACES 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // expr ::= scalar 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // expr ::= T_AT expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // expr ::= T_EXIT exit_expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // expr ::= T_UNSET_CAST expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // expr ::= T_BOOL_CAST expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // expr ::= T_OBJECT_CAST expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // expr ::= T_ARRAY_CAST expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // expr ::= T_STRING_CAST expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // expr ::= T_DOUBLE_CAST expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // expr ::= T_INT_CAST expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // expr ::= internal_functions_in_yacc 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // expr ::= expr T_QUESTION T_COLON expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // expr ::= expr T_QUESTION expr T_COLON expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 5, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // expr ::= T_OPEN_BRACES expr T_CLOSE_BRACES 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // expr ::= expr T_INSTANCEOF class_name_reference 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // expr ::= expr T_IS_GREATER_OR_EQUAL expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // expr ::= expr T_IS_GREATER expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // expr ::= expr T_IS_SMALLER_OR_EQUAL expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // expr ::= expr T_IS_SMALLER expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // expr ::= expr T_IS_NOT_EQUAL expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // expr ::= expr T_IS_EQUAL expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // expr ::= expr T_IS_NOT_IDENTICAL expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // expr ::= expr T_IS_IDENTICAL expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // expr ::= T_BITWISE_NOT expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // expr ::= T_NOT expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // expr ::= T_MINUS expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // expr ::= T_PLUS expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // expr ::= expr T_SR expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // expr ::= expr T_SL expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // expr ::= expr T_MODULO expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // expr ::= expr T_DIV expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // expr ::= expr T_MULT expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // expr ::= expr T_MINUS expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // expr ::= expr T_PLUS expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // expr ::= expr T_POINT expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // expr ::= expr T_BITWISE_XOR expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // expr ::= expr T_BITWISE_AND expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // expr ::= expr T_BITWISE_OR expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // expr ::= expr T_LOGICAL_XOR expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // expr ::= expr T_LOGICAL_AND expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // expr ::= expr T_LOGICAL_OR expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // expr ::= expr T_BOOLEAN_AND expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // expr ::= expr T_BOOLEAN_OR expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // expr ::= T_DEC variable 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // expr ::= variable T_DEC 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // expr ::= T_INC variable 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // expr ::= variable T_INC 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // expr ::= variable T_SR_EQUAL expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // expr ::= variable T_SL_EQUAL expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // expr ::= variable T_XOR_EQUAL expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // expr ::= variable T_OR_EQUAL expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // expr ::= variable T_AND_EQUAL expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // expr ::= variable T_MOD_EQUAL expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // expr ::= variable T_CONCAT_EQUAL expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // expr ::= variable T_DIV_EQUAL expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // expr ::= variable T_MUL_EQUAL expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // expr ::= variable T_MINUS_EQUAL expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // expr ::= variable T_PLUS_EQUAL expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // expr ::= T_CLONE expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // expr ::= T_NEW class_name_reference ctor_arguments 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // expr ::= variable T_ASSIGN T_BITWISE_AND T_NEW class_name_reference ctor_arguments 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 6, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-5)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // expr ::= variable T_ASSIGN T_BITWISE_AND variable 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // expr ::= variable T_ASSIGN expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // expr ::= T_LIST T_OPEN_BRACES assignment_list T_CLOSE_BRACES T_ASSIGN expr 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 6, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-5)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // expr ::= variable 
            {
              ParseNode RESULT = createParseNode("expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // non_empty_static_array_pair_list ::= static_expr 
            {
              ParseNode RESULT = createParseNode("non_empty_static_array_pair_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",73, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // non_empty_static_array_pair_list ::= static_expr T_DOUBLE_ARROW static_expr 
            {
              ParseNode RESULT = createParseNode("non_empty_static_array_pair_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",73, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_expr 
            {
              ParseNode RESULT = createParseNode("non_empty_static_array_pair_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",73, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_expr T_DOUBLE_ARROW static_expr 
            {
              ParseNode RESULT = createParseNode("non_empty_static_array_pair_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 5, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",73, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // possible_comma ::= T_COMMA 
            {
              ParseNode RESULT = createParseNode("possible_comma",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("possible_comma",78, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // possible_comma ::= 
            {
              ParseNode RESULT = createParseNode("possible_comma",CUP$CUPParser$act_num, CUP$CUPParser$stack, 0, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("possible_comma",78, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // static_array_pair_list ::= non_empty_static_array_pair_list possible_comma 
            {
              ParseNode RESULT = createParseNode("static_array_pair_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("static_array_pair_list",84, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // static_array_pair_list ::= 
            {
              ParseNode RESULT = createParseNode("static_array_pair_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 0, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("static_array_pair_list",84, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // scalar ::= T_START_HEREDOC encaps_list T_END_HEREDOC 
            {
              ParseNode RESULT = createParseNode("scalar",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("scalar",81, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // scalar ::= T_DOUBLE_QUOTE T_ENCAPSED_AND_WHITESPACE T_DOUBLE_QUOTE 
            {
              ParseNode RESULT = createParseNode("scalar",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("scalar",81, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // scalar ::= T_DOUBLE_QUOTE encaps_list T_DOUBLE_QUOTE 
            {
              ParseNode RESULT = createParseNode("scalar",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("scalar",81, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // scalar ::= common_scalar 
            {
              ParseNode RESULT = createParseNode("scalar",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("scalar",81, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // scalar ::= T_NS_SEPARATOR namespace_name 
            {
              ParseNode RESULT = createParseNode("scalar",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("scalar",81, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // scalar ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              ParseNode RESULT = createParseNode("scalar",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("scalar",81, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // scalar ::= namespace_name 
            {
              ParseNode RESULT = createParseNode("scalar",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("scalar",81, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // scalar ::= class_constant 
            {
              ParseNode RESULT = createParseNode("scalar",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("scalar",81, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // static_class_constant ::= class_name T_DOUBLE_COLON T_STRING 
            {
              ParseNode RESULT = createParseNode("static_class_constant",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("static_class_constant",85, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // static_expr ::= static_class_constant 
            {
              ParseNode RESULT = createParseNode("static_expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("static_expr",87, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // static_expr ::= T_ARRAY T_OPEN_BRACES static_array_pair_list T_CLOSE_BRACES 
            {
              ParseNode RESULT = createParseNode("static_expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("static_expr",87, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // static_expr ::= T_MINUS static_expr 
            {
              ParseNode RESULT = createParseNode("static_expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("static_expr",87, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // static_expr ::= T_PLUS static_expr 
            {
              ParseNode RESULT = createParseNode("static_expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("static_expr",87, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // static_expr ::= T_NS_SEPARATOR namespace_name 
            {
              ParseNode RESULT = createParseNode("static_expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("static_expr",87, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // static_expr ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              ParseNode RESULT = createParseNode("static_expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("static_expr",87, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // static_expr ::= namespace_name 
            {
              ParseNode RESULT = createParseNode("static_expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("static_expr",87, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // static_expr ::= common_scalar 
            {
              ParseNode RESULT = createParseNode("static_expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("static_expr",87, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // common_scalar ::= T_START_HEREDOC T_END_HEREDOC 
            {
              ParseNode RESULT = createParseNode("common_scalar",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("common_scalar",20, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // common_scalar ::= T_START_HEREDOC T_CONSTANT_ENCAPSED_STRING T_END_HEREDOC 
            {
              ParseNode RESULT = createParseNode("common_scalar",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("common_scalar",20, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // common_scalar ::= T_START_HEREDOC T_ENCAPSED_AND_WHITESPACE T_END_HEREDOC 
            {
              ParseNode RESULT = createParseNode("common_scalar",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("common_scalar",20, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // common_scalar ::= T_NS_C 
            {
              ParseNode RESULT = createParseNode("common_scalar",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("common_scalar",20, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // common_scalar ::= T_FUNC_C 
            {
              ParseNode RESULT = createParseNode("common_scalar",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("common_scalar",20, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // common_scalar ::= T_METHOD_C 
            {
              ParseNode RESULT = createParseNode("common_scalar",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("common_scalar",20, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // common_scalar ::= T_CLASS_C 
            {
              ParseNode RESULT = createParseNode("common_scalar",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("common_scalar",20, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // common_scalar ::= T_DIR 
            {
              ParseNode RESULT = createParseNode("common_scalar",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("common_scalar",20, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // common_scalar ::= T_FILE 
            {
              ParseNode RESULT = createParseNode("common_scalar",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("common_scalar",20, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // common_scalar ::= T_LINE 
            {
              ParseNode RESULT = createParseNode("common_scalar",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("common_scalar",20, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // common_scalar ::= T_CONSTANT_ENCAPSED_STRING 
            {
              ParseNode RESULT = createParseNode("common_scalar",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("common_scalar",20, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // common_scalar ::= T_DNUMBER 
            {
              ParseNode RESULT = createParseNode("common_scalar",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("common_scalar",20, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // common_scalar ::= T_LNUMBER 
            {
              ParseNode RESULT = createParseNode("common_scalar",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("common_scalar",20, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // ctor_arguments ::= T_OPEN_BRACES function_call_parameter_list T_CLOSE_BRACES 
            {
              ParseNode RESULT = createParseNode("ctor_arguments",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",23, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // ctor_arguments ::= 
            {
              ParseNode RESULT = createParseNode("ctor_arguments",CUP$CUPParser$act_num, CUP$CUPParser$stack, 0, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",23, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // backticks_expr ::= encaps_list 
            {
              ParseNode RESULT = createParseNode("backticks_expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("backticks_expr",6, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // backticks_expr ::= T_ENCAPSED_AND_WHITESPACE 
            {
              ParseNode RESULT = createParseNode("backticks_expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("backticks_expr",6, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // backticks_expr ::= T_STRING 
            {
              ParseNode RESULT = createParseNode("backticks_expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("backticks_expr",6, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // backticks_expr ::= 
            {
              ParseNode RESULT = createParseNode("backticks_expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 0, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("backticks_expr",6, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // exit_expr ::= T_OPEN_BRACES expr T_CLOSE_BRACES 
            {
              ParseNode RESULT = createParseNode("exit_expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("exit_expr",35, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // exit_expr ::= T_OPEN_BRACES T_CLOSE_BRACES 
            {
              ParseNode RESULT = createParseNode("exit_expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("exit_expr",35, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // exit_expr ::= 
            {
              ParseNode RESULT = createParseNode("exit_expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 0, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("exit_expr",35, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // dynamic_class_name_variable_properties ::= 
            {
              ParseNode RESULT = createParseNode("dynamic_class_name_variable_properties",CUP$CUPParser$act_num, CUP$CUPParser$stack, 0, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_properties",28, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // dynamic_class_name_variable_properties ::= dynamic_class_name_variable_properties T_OBJECT_OPERATOR object_property 
            {
              ParseNode RESULT = createParseNode("dynamic_class_name_variable_properties",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_properties",28, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // dynamic_class_name_reference ::= base_variable 
            {
              ParseNode RESULT = createParseNode("dynamic_class_name_reference",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_reference",27, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // dynamic_class_name_reference ::= base_variable T_OBJECT_OPERATOR object_property dynamic_class_name_variable_properties 
            {
              ParseNode RESULT = createParseNode("dynamic_class_name_reference",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_reference",27, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // class_name_reference ::= dynamic_class_name_reference 
            {
              ParseNode RESULT = createParseNode("class_name_reference",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("class_name_reference",16, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // class_name_reference ::= class_name 
            {
              ParseNode RESULT = createParseNode("class_name_reference",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("class_name_reference",16, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // fully_qualified_class_name ::= T_NS_SEPARATOR namespace_name 
            {
              ParseNode RESULT = createParseNode("fully_qualified_class_name",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",43, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // fully_qualified_class_name ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              ParseNode RESULT = createParseNode("fully_qualified_class_name",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",43, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // fully_qualified_class_name ::= namespace_name 
            {
              ParseNode RESULT = createParseNode("fully_qualified_class_name",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",43, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // class_name ::= T_NS_SEPARATOR namespace_name 
            {
              ParseNode RESULT = createParseNode("class_name",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("class_name",15, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // class_name ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              ParseNode RESULT = createParseNode("class_name",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("class_name",15, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // class_name ::= namespace_name 
            {
              ParseNode RESULT = createParseNode("class_name",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("class_name",15, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // class_name ::= T_STATIC 
            {
              ParseNode RESULT = createParseNode("class_name",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("class_name",15, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // function_call ::= variable_without_objects T_OPEN_BRACES function_call_parameter_list T_CLOSE_BRACES 
            {
              ParseNode RESULT = createParseNode("function_call",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("function_call",44, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // function_call ::= reference_variable T_DOUBLE_COLON variable_without_objects T_OPEN_BRACES function_call_parameter_list T_CLOSE_BRACES 
            {
              ParseNode RESULT = createParseNode("function_call",CUP$CUPParser$act_num, CUP$CUPParser$stack, 6, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("function_call",44, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-5)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // function_call ::= reference_variable T_DOUBLE_COLON T_STRING T_OPEN_BRACES function_call_parameter_list T_CLOSE_BRACES 
            {
              ParseNode RESULT = createParseNode("function_call",CUP$CUPParser$act_num, CUP$CUPParser$stack, 6, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("function_call",44, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-5)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // function_call ::= class_name T_DOUBLE_COLON variable_without_objects T_OPEN_BRACES function_call_parameter_list T_CLOSE_BRACES 
            {
              ParseNode RESULT = createParseNode("function_call",CUP$CUPParser$act_num, CUP$CUPParser$stack, 6, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("function_call",44, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-5)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // function_call ::= class_name T_DOUBLE_COLON T_STRING T_OPEN_BRACES function_call_parameter_list T_CLOSE_BRACES 
            {
              ParseNode RESULT = createParseNode("function_call",CUP$CUPParser$act_num, CUP$CUPParser$stack, 6, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("function_call",44, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-5)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // function_call ::= T_NS_SEPARATOR namespace_name T_OPEN_BRACES function_call_parameter_list T_CLOSE_BRACES 
            {
              ParseNode RESULT = createParseNode("function_call",CUP$CUPParser$act_num, CUP$CUPParser$stack, 5, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("function_call",44, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // function_call ::= T_NAMESPACE T_NS_SEPARATOR namespace_name T_OPEN_BRACES function_call_parameter_list T_CLOSE_BRACES 
            {
              ParseNode RESULT = createParseNode("function_call",CUP$CUPParser$act_num, CUP$CUPParser$stack, 6, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("function_call",44, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-5)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // function_call ::= namespace_name T_OPEN_BRACES function_call_parameter_list T_CLOSE_BRACES 
            {
              ParseNode RESULT = createParseNode("function_call",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("function_call",44, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // lexical_var_list ::= T_BITWISE_AND T_VARIABLE 
            {
              ParseNode RESULT = createParseNode("lexical_var_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",58, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // lexical_var_list ::= T_VARIABLE 
            {
              ParseNode RESULT = createParseNode("lexical_var_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",58, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // lexical_var_list ::= lexical_var_list T_COMMA T_BITWISE_AND T_VARIABLE 
            {
              ParseNode RESULT = createParseNode("lexical_var_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",58, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // lexical_var_list ::= lexical_var_list T_COMMA T_VARIABLE 
            {
              ParseNode RESULT = createParseNode("lexical_var_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",58, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // lexical_vars ::= T_USE T_OPEN_BRACES lexical_var_list T_CLOSE_BRACES 
            {
              ParseNode RESULT = createParseNode("lexical_vars",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("lexical_vars",59, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // lexical_vars ::= 
            {
              ParseNode RESULT = createParseNode("lexical_vars",CUP$CUPParser$act_num, CUP$CUPParser$stack, 0, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("lexical_vars",59, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // non_empty_for_expr ::= expr 
            {
              ParseNode RESULT = createParseNode("non_empty_for_expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",69, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // non_empty_for_expr ::= non_empty_for_expr T_COMMA expr 
            {
              ParseNode RESULT = createParseNode("non_empty_for_expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",69, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // for_expr ::= non_empty_for_expr 
            {
              ParseNode RESULT = createParseNode("for_expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("for_expr",38, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // for_expr ::= 
            {
              ParseNode RESULT = createParseNode("for_expr",CUP$CUPParser$act_num, CUP$CUPParser$stack, 0, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("for_expr",38, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // echo_expr_list ::= expr 
            {
              ParseNode RESULT = createParseNode("echo_expr_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",29, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // echo_expr_list ::= echo_expr_list T_COMMA expr 
            {
              ParseNode RESULT = createParseNode("echo_expr_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",29, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // class_constant_declaration ::= T_CONST T_STRING T_ASSIGN static_expr 
            {
              ParseNode RESULT = createParseNode("class_constant_declaration",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("class_constant_declaration",12, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // class_constant_declaration ::= class_constant_declaration T_COMMA T_STRING T_ASSIGN static_expr 
            {
              ParseNode RESULT = createParseNode("class_constant_declaration",CUP$CUPParser$act_num, CUP$CUPParser$stack, 5, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("class_constant_declaration",12, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // class_variable_declaration ::= T_VARIABLE T_ASSIGN static_expr 
            {
              ParseNode RESULT = createParseNode("class_variable_declaration",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",19, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // class_variable_declaration ::= T_VARIABLE 
            {
              ParseNode RESULT = createParseNode("class_variable_declaration",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",19, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE T_ASSIGN static_expr 
            {
              ParseNode RESULT = createParseNode("class_variable_declaration",CUP$CUPParser$act_num, CUP$CUPParser$stack, 5, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",19, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE 
            {
              ParseNode RESULT = createParseNode("class_variable_declaration",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",19, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // member_modifier ::= T_FINAL 
            {
              ParseNode RESULT = createParseNode("member_modifier",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("member_modifier",60, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // member_modifier ::= T_ABSTRACT 
            {
              ParseNode RESULT = createParseNode("member_modifier",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("member_modifier",60, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // member_modifier ::= T_STATIC 
            {
              ParseNode RESULT = createParseNode("member_modifier",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("member_modifier",60, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // member_modifier ::= T_PRIVATE 
            {
              ParseNode RESULT = createParseNode("member_modifier",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("member_modifier",60, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // member_modifier ::= T_PROTECTED 
            {
              ParseNode RESULT = createParseNode("member_modifier",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("member_modifier",60, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // member_modifier ::= T_PUBLIC 
            {
              ParseNode RESULT = createParseNode("member_modifier",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("member_modifier",60, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // non_empty_member_modifiers ::= non_empty_member_modifiers member_modifier 
            {
              ParseNode RESULT = createParseNode("non_empty_member_modifiers",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",71, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // non_empty_member_modifiers ::= member_modifier 
            {
              ParseNode RESULT = createParseNode("non_empty_member_modifiers",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",71, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // method_modifiers ::= non_empty_member_modifiers 
            {
              ParseNode RESULT = createParseNode("method_modifiers",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("method_modifiers",62, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // method_modifiers ::= 
            {
              ParseNode RESULT = createParseNode("method_modifiers",CUP$CUPParser$act_num, CUP$CUPParser$stack, 0, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("method_modifiers",62, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // variable_modifiers ::= T_VAR 
            {
              ParseNode RESULT = createParseNode("variable_modifiers",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",95, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // variable_modifiers ::= non_empty_member_modifiers 
            {
              ParseNode RESULT = createParseNode("variable_modifiers",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",95, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // method_body ::= T_OPEN_CURLY_BRACES inner_statement_list T_CLOSE_CURLY_BRACES 
            {
              ParseNode RESULT = createParseNode("method_body",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("method_body",61, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // method_body ::= T_SEMICOLON 
            {
              ParseNode RESULT = createParseNode("method_body",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("method_body",61, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // class_statement ::= method_modifiers T_FUNCTION is_reference T_STRING T_OPEN_BRACES parameter_list T_CLOSE_BRACES method_body 
            {
              ParseNode RESULT = createParseNode("class_statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 8, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("class_statement",17, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-7)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // class_statement ::= class_constant_declaration T_SEMICOLON 
            {
              ParseNode RESULT = createParseNode("class_statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("class_statement",17, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // class_statement ::= variable_modifiers class_variable_declaration T_SEMICOLON 
            {
              ParseNode RESULT = createParseNode("class_statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("class_statement",17, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // class_statement_list ::= 
            {
              ParseNode RESULT = createParseNode("class_statement_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 0, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("class_statement_list",18, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // class_statement_list ::= class_statement_list class_statement 
            {
              ParseNode RESULT = createParseNode("class_statement_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("class_statement_list",18, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // static_var_list ::= T_VARIABLE T_ASSIGN static_expr 
            {
              ParseNode RESULT = createParseNode("static_var_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("static_var_list",88, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // static_var_list ::= T_VARIABLE 
            {
              ParseNode RESULT = createParseNode("static_var_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("static_var_list",88, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // static_var_list ::= static_var_list T_COMMA T_VARIABLE T_ASSIGN static_expr 
            {
              ParseNode RESULT = createParseNode("static_var_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 5, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("static_var_list",88, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // static_var_list ::= static_var_list T_COMMA T_VARIABLE 
            {
              ParseNode RESULT = createParseNode("static_var_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("static_var_list",88, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // global_var ::= T_DOLLAR T_OPEN_CURLY_BRACES expr T_CLOSE_CURLY_BRACES 
            {
              ParseNode RESULT = createParseNode("global_var",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("global_var",47, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // global_var ::= T_DOLLAR variable 
            {
              ParseNode RESULT = createParseNode("global_var",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("global_var",47, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // global_var ::= T_VARIABLE 
            {
              ParseNode RESULT = createParseNode("global_var",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("global_var",47, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // global_var_list ::= global_var 
            {
              ParseNode RESULT = createParseNode("global_var_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("global_var_list",48, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // global_var_list ::= global_var_list T_COMMA global_var 
            {
              ParseNode RESULT = createParseNode("global_var_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("global_var_list",48, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA T_BITWISE_AND variable 
            {
              ParseNode RESULT = createParseNode("non_empty_function_call_parameter_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",70, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA expr 
            {
              ParseNode RESULT = createParseNode("non_empty_function_call_parameter_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",70, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // non_empty_function_call_parameter_list ::= T_BITWISE_AND variable 
            {
              ParseNode RESULT = createParseNode("non_empty_function_call_parameter_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",70, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // non_empty_function_call_parameter_list ::= expr 
            {
              ParseNode RESULT = createParseNode("non_empty_function_call_parameter_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",70, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // function_call_parameter_list ::= 
            {
              ParseNode RESULT = createParseNode("function_call_parameter_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 0, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",45, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // function_call_parameter_list ::= non_empty_function_call_parameter_list 
            {
              ParseNode RESULT = createParseNode("function_call_parameter_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",45, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // optional_class_type ::= T_ARRAY 
            {
              ParseNode RESULT = createParseNode("optional_class_type",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",76, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // optional_class_type ::= fully_qualified_class_name 
            {
              ParseNode RESULT = createParseNode("optional_class_type",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",76, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // optional_class_type ::= 
            {
              ParseNode RESULT = createParseNode("optional_class_type",CUP$CUPParser$act_num, CUP$CUPParser$stack, 0, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",76, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA optional_class_type T_VARIABLE T_ASSIGN static_expr 
            {
              ParseNode RESULT = createParseNode("non_empty_parameter_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 6, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",72, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-5)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA optional_class_type T_BITWISE_AND T_VARIABLE T_ASSIGN static_expr 
            {
              ParseNode RESULT = createParseNode("non_empty_parameter_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 7, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",72, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-6)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA optional_class_type T_BITWISE_AND T_VARIABLE 
            {
              ParseNode RESULT = createParseNode("non_empty_parameter_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 5, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",72, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA optional_class_type T_VARIABLE 
            {
              ParseNode RESULT = createParseNode("non_empty_parameter_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",72, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // non_empty_parameter_list ::= optional_class_type T_VARIABLE T_ASSIGN static_expr 
            {
              ParseNode RESULT = createParseNode("non_empty_parameter_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",72, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // non_empty_parameter_list ::= optional_class_type T_BITWISE_AND T_VARIABLE T_ASSIGN static_expr 
            {
              ParseNode RESULT = createParseNode("non_empty_parameter_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 5, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",72, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // non_empty_parameter_list ::= optional_class_type T_BITWISE_AND T_VARIABLE 
            {
              ParseNode RESULT = createParseNode("non_empty_parameter_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",72, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // non_empty_parameter_list ::= optional_class_type T_VARIABLE 
            {
              ParseNode RESULT = createParseNode("non_empty_parameter_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",72, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // parameter_list ::= 
            {
              ParseNode RESULT = createParseNode("parameter_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 0, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("parameter_list",77, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // parameter_list ::= non_empty_parameter_list 
            {
              ParseNode RESULT = createParseNode("parameter_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("parameter_list",77, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // new_else_single ::= T_ELSE T_COLON inner_statement_list 
            {
              ParseNode RESULT = createParseNode("new_else_single",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("new_else_single",65, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // new_else_single ::= 
            {
              ParseNode RESULT = createParseNode("new_else_single",CUP$CUPParser$act_num, CUP$CUPParser$stack, 0, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("new_else_single",65, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // else_single ::= T_ELSE statement 
            {
              ParseNode RESULT = createParseNode("else_single",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("else_single",30, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // else_single ::= 
            {
              ParseNode RESULT = createParseNode("else_single",CUP$CUPParser$act_num, CUP$CUPParser$stack, 0, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("else_single",30, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // new_elseif_list ::= new_elseif_list T_ELSEIF T_OPEN_BRACES expr T_CLOSE_BRACES T_COLON inner_statement_list 
            {
              ParseNode RESULT = createParseNode("new_elseif_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 7, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",66, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-6)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // new_elseif_list ::= 
            {
              ParseNode RESULT = createParseNode("new_elseif_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 0, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",66, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // elseif_list ::= elseif_list T_ELSEIF T_OPEN_BRACES expr T_CLOSE_BRACES statement 
            {
              ParseNode RESULT = createParseNode("elseif_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 6, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("elseif_list",31, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-5)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // elseif_list ::= 
            {
              ParseNode RESULT = createParseNode("elseif_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 0, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("elseif_list",31, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // while_statement ::= T_COLON inner_statement_list T_ENDWHILE T_SEMICOLON 
            {
              ParseNode RESULT = createParseNode("while_statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("while_statement",100, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // while_statement ::= statement 
            {
              ParseNode RESULT = createParseNode("while_statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("while_statement",100, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // case_separator ::= T_SEMICOLON 
            {
              ParseNode RESULT = createParseNode("case_separator",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("case_separator",10, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // case_separator ::= T_COLON 
            {
              ParseNode RESULT = createParseNode("case_separator",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("case_separator",10, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // case_list ::= case_list T_DEFAULT case_separator inner_statement_list 
            {
              ParseNode RESULT = createParseNode("case_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("case_list",9, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // case_list ::= case_list T_CASE expr case_separator inner_statement_list 
            {
              ParseNode RESULT = createParseNode("case_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 5, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("case_list",9, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // case_list ::= 
            {
              ParseNode RESULT = createParseNode("case_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 0, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("case_list",9, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // switch_case_list ::= T_COLON T_SEMICOLON case_list T_ENDSWITCH T_SEMICOLON 
            {
              ParseNode RESULT = createParseNode("switch_case_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 5, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",89, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // switch_case_list ::= T_COLON case_list T_ENDSWITCH T_SEMICOLON 
            {
              ParseNode RESULT = createParseNode("switch_case_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",89, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // switch_case_list ::= T_OPEN_CURLY_BRACES T_SEMICOLON case_list T_CLOSE_CURLY_BRACES 
            {
              ParseNode RESULT = createParseNode("switch_case_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",89, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // switch_case_list ::= T_OPEN_CURLY_BRACES case_list T_CLOSE_CURLY_BRACES 
            {
              ParseNode RESULT = createParseNode("switch_case_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",89, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // declare_list ::= declare_list T_COMMA T_STRING T_ASSIGN static_expr 
            {
              ParseNode RESULT = createParseNode("declare_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 5, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("declare_list",24, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // declare_list ::= T_STRING T_ASSIGN static_expr 
            {
              ParseNode RESULT = createParseNode("declare_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("declare_list",24, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // declare_statement ::= T_COLON inner_statement_list T_ENDDECLARE T_SEMICOLON 
            {
              ParseNode RESULT = createParseNode("declare_statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("declare_statement",25, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // declare_statement ::= statement 
            {
              ParseNode RESULT = createParseNode("declare_statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("declare_statement",25, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // foreach_statement ::= T_COLON inner_statement_list T_ENDFOREACH T_SEMICOLON 
            {
              ParseNode RESULT = createParseNode("foreach_statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("foreach_statement",41, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // foreach_statement ::= statement 
            {
              ParseNode RESULT = createParseNode("foreach_statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("foreach_statement",41, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // for_statement ::= T_COLON inner_statement_list T_ENDFOR T_SEMICOLON 
            {
              ParseNode RESULT = createParseNode("for_statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("for_statement",39, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // for_statement ::= statement 
            {
              ParseNode RESULT = createParseNode("for_statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("for_statement",39, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // foreach_variable ::= T_BITWISE_AND variable 
            {
              ParseNode RESULT = createParseNode("foreach_variable",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("foreach_variable",42, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // foreach_variable ::= variable 
            {
              ParseNode RESULT = createParseNode("foreach_variable",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("foreach_variable",42, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // foreach_optional_arg ::= T_DOUBLE_ARROW foreach_variable 
            {
              ParseNode RESULT = createParseNode("foreach_optional_arg",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("foreach_optional_arg",40, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // foreach_optional_arg ::= 
            {
              ParseNode RESULT = createParseNode("foreach_optional_arg",CUP$CUPParser$act_num, CUP$CUPParser$stack, 0, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("foreach_optional_arg",40, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // interface_list ::= interface_list T_COMMA fully_qualified_class_name 
            {
              ParseNode RESULT = createParseNode("interface_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("interface_list",54, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // interface_list ::= fully_qualified_class_name 
            {
              ParseNode RESULT = createParseNode("interface_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("interface_list",54, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // implements_list ::= T_IMPLEMENTS interface_list 
            {
              ParseNode RESULT = createParseNode("implements_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("implements_list",49, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // implements_list ::= 
            {
              ParseNode RESULT = createParseNode("implements_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 0, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("implements_list",49, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // interface_extends_list ::= T_EXTENDS interface_list 
            {
              ParseNode RESULT = createParseNode("interface_extends_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",53, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // interface_extends_list ::= 
            {
              ParseNode RESULT = createParseNode("interface_extends_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 0, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",53, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // interface_entry ::= T_INTERFACE 
            {
              ParseNode RESULT = createParseNode("interface_entry",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("interface_entry",52, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // extends_from ::= T_EXTENDS fully_qualified_class_name 
            {
              ParseNode RESULT = createParseNode("extends_from",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("extends_from",37, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // extends_from ::= 
            {
              ParseNode RESULT = createParseNode("extends_from",CUP$CUPParser$act_num, CUP$CUPParser$stack, 0, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("extends_from",37, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // class_entry_type ::= T_FINAL T_CLASS 
            {
              ParseNode RESULT = createParseNode("class_entry_type",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",14, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // class_entry_type ::= T_ABSTRACT T_CLASS 
            {
              ParseNode RESULT = createParseNode("class_entry_type",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",14, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // class_entry_type ::= T_CLASS 
            {
              ParseNode RESULT = createParseNode("class_entry_type",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",14, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // class_declaration_statement ::= interface_entry T_STRING interface_extends_list T_OPEN_CURLY_BRACES class_statement_list T_CLOSE_CURLY_BRACES 
            {
              ParseNode RESULT = createParseNode("class_declaration_statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 6, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("class_declaration_statement",13, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-5)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // class_declaration_statement ::= class_entry_type T_STRING extends_from implements_list T_OPEN_CURLY_BRACES class_statement_list T_CLOSE_CURLY_BRACES 
            {
              ParseNode RESULT = createParseNode("class_declaration_statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 7, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("class_declaration_statement",13, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-6)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // function_declaration_statement ::= T_FUNCTION is_reference T_STRING T_OPEN_BRACES parameter_list T_CLOSE_BRACES T_OPEN_CURLY_BRACES inner_statement_list T_CLOSE_CURLY_BRACES 
            {
              ParseNode RESULT = createParseNode("function_declaration_statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 9, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("function_declaration_statement",46, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-8)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // is_reference ::= T_BITWISE_AND 
            {
              ParseNode RESULT = createParseNode("is_reference",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("is_reference",56, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // is_reference ::= 
            {
              ParseNode RESULT = createParseNode("is_reference",CUP$CUPParser$act_num, CUP$CUPParser$stack, 0, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("is_reference",56, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // variable_list ::= variable_list T_COMMA variable 
            {
              ParseNode RESULT = createParseNode("variable_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("variable_list",94, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // variable_list ::= variable 
            {
              ParseNode RESULT = createParseNode("variable_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("variable_list",94, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // additional_catch ::= T_CATCH T_OPEN_BRACES fully_qualified_class_name T_VARIABLE T_CLOSE_BRACES T_OPEN_CURLY_BRACES inner_statement_list T_CLOSE_CURLY_BRACES 
            {
              ParseNode RESULT = createParseNode("additional_catch",CUP$CUPParser$act_num, CUP$CUPParser$stack, 8, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("additional_catch",1, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-7)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // non_empty_additional_catches ::= non_empty_additional_catches additional_catch 
            {
              ParseNode RESULT = createParseNode("non_empty_additional_catches",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_empty_additional_catches",67, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // non_empty_additional_catches ::= additional_catch 
            {
              ParseNode RESULT = createParseNode("non_empty_additional_catches",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_empty_additional_catches",67, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // additional_catches ::= 
            {
              ParseNode RESULT = createParseNode("additional_catches",CUP$CUPParser$act_num, CUP$CUPParser$stack, 0, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("additional_catches",2, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // additional_catches ::= non_empty_additional_catches 
            {
              ParseNode RESULT = createParseNode("additional_catches",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("additional_catches",2, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statement ::= T_STRING T_COLON 
            {
              ParseNode RESULT = createParseNode("statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("statement",83, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement ::= T_GOTO T_STRING T_SEMICOLON 
            {
              ParseNode RESULT = createParseNode("statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("statement",83, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement ::= T_THROW expr T_SEMICOLON 
            {
              ParseNode RESULT = createParseNode("statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("statement",83, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= T_TRY T_OPEN_CURLY_BRACES inner_statement_list T_CLOSE_CURLY_BRACES T_CATCH T_OPEN_BRACES fully_qualified_class_name T_VARIABLE T_CLOSE_BRACES T_OPEN_CURLY_BRACES inner_statement_list T_CLOSE_CURLY_BRACES additional_catches 
            {
              ParseNode RESULT = createParseNode("statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 13, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("statement",83, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-12)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= T_SEMICOLON 
            {
              ParseNode RESULT = createParseNode("statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("statement",83, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= T_DECLARE T_OPEN_BRACES declare_list T_CLOSE_BRACES declare_statement 
            {
              ParseNode RESULT = createParseNode("statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 5, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("statement",83, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= T_FOREACH T_OPEN_BRACES expr T_AS foreach_variable foreach_optional_arg T_CLOSE_BRACES foreach_statement 
            {
              ParseNode RESULT = createParseNode("statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 8, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("statement",83, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-7)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= T_UNSET T_OPEN_BRACES variable_list T_CLOSE_BRACES T_SEMICOLON 
            {
              ParseNode RESULT = createParseNode("statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 5, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("statement",83, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= expr T_SEMICOLON 
            {
              ParseNode RESULT = createParseNode("statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("statement",83, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= T_INLINE_HTML 
            {
              ParseNode RESULT = createParseNode("statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("statement",83, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= T_ECHO echo_expr_list T_SEMICOLON 
            {
              ParseNode RESULT = createParseNode("statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("statement",83, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= T_STATIC static_var_list T_SEMICOLON 
            {
              ParseNode RESULT = createParseNode("statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("statement",83, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= T_GLOBAL global_var_list T_SEMICOLON 
            {
              ParseNode RESULT = createParseNode("statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("statement",83, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= T_RETURN expr T_SEMICOLON 
            {
              ParseNode RESULT = createParseNode("statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("statement",83, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= T_RETURN T_SEMICOLON 
            {
              ParseNode RESULT = createParseNode("statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("statement",83, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= T_CONTINUE expr T_SEMICOLON 
            {
              ParseNode RESULT = createParseNode("statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("statement",83, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= T_CONTINUE T_SEMICOLON 
            {
              ParseNode RESULT = createParseNode("statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("statement",83, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= T_BREAK expr T_SEMICOLON 
            {
              ParseNode RESULT = createParseNode("statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("statement",83, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= T_BREAK T_SEMICOLON 
            {
              ParseNode RESULT = createParseNode("statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("statement",83, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= T_SWITCH T_OPEN_BRACES expr T_CLOSE_BRACES switch_case_list 
            {
              ParseNode RESULT = createParseNode("statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 5, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("statement",83, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= T_FOR T_OPEN_BRACES for_expr T_SEMICOLON for_expr T_SEMICOLON for_expr T_CLOSE_BRACES for_statement 
            {
              ParseNode RESULT = createParseNode("statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 9, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("statement",83, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-8)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= T_DO statement T_WHILE T_OPEN_BRACES expr T_CLOSE_BRACES T_SEMICOLON 
            {
              ParseNode RESULT = createParseNode("statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 7, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("statement",83, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-6)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= T_WHILE T_OPEN_BRACES expr T_CLOSE_BRACES while_statement 
            {
              ParseNode RESULT = createParseNode("statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 5, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("statement",83, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= T_IF T_OPEN_BRACES expr T_CLOSE_BRACES T_COLON inner_statement_list new_elseif_list new_else_single T_ENDIF T_SEMICOLON 
            {
              ParseNode RESULT = createParseNode("statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 10, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("statement",83, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-9)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= T_IF T_OPEN_BRACES expr T_CLOSE_BRACES statement elseif_list else_single 
            {
              ParseNode RESULT = createParseNode("statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 7, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("statement",83, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-6)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= T_OPEN_CURLY_BRACES inner_statement_list T_CLOSE_CURLY_BRACES 
            {
              ParseNode RESULT = createParseNode("statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("statement",83, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // inner_statement ::= T_HALT_COMPILER T_OPEN_BRACES T_CLOSE_BRACES T_SEMICOLON 
            {
              ParseNode RESULT = createParseNode("inner_statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("inner_statement",50, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // inner_statement ::= class_declaration_statement 
            {
              ParseNode RESULT = createParseNode("inner_statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("inner_statement",50, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inner_statement ::= function_declaration_statement 
            {
              ParseNode RESULT = createParseNode("inner_statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("inner_statement",50, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // inner_statement ::= statement 
            {
              ParseNode RESULT = createParseNode("inner_statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("inner_statement",50, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // inner_statement_list ::= 
            {
              ParseNode RESULT = createParseNode("inner_statement_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 0, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",51, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // inner_statement_list ::= inner_statement_list inner_statement 
            {
              ParseNode RESULT = createParseNode("inner_statement_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",51, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // constant_declaration ::= T_CONST T_STRING T_ASSIGN static_expr 
            {
              ParseNode RESULT = createParseNode("constant_declaration",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("constant_declaration",22, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // constant_declaration ::= constant_declaration T_COMMA T_STRING T_ASSIGN static_expr 
            {
              ParseNode RESULT = createParseNode("constant_declaration",CUP$CUPParser$act_num, CUP$CUPParser$stack, 5, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("constant_declaration",22, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // use_declaration ::= T_NS_SEPARATOR namespace_name T_AS T_STRING 
            {
              ParseNode RESULT = createParseNode("use_declaration",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("use_declaration",92, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // use_declaration ::= T_NS_SEPARATOR namespace_name 
            {
              ParseNode RESULT = createParseNode("use_declaration",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("use_declaration",92, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // use_declaration ::= namespace_name T_AS T_STRING 
            {
              ParseNode RESULT = createParseNode("use_declaration",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("use_declaration",92, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // use_declaration ::= namespace_name 
            {
              ParseNode RESULT = createParseNode("use_declaration",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("use_declaration",92, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // use_declarations ::= use_declaration 
            {
              ParseNode RESULT = createParseNode("use_declarations",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("use_declarations",93, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // use_declarations ::= use_declarations T_COMMA use_declaration 
            {
              ParseNode RESULT = createParseNode("use_declarations",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("use_declarations",93, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // top_statement ::= constant_declaration T_SEMICOLON 
            {
              ParseNode RESULT = createParseNode("top_statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("top_statement",90, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // top_statement ::= T_USE use_declarations T_SEMICOLON 
            {
              ParseNode RESULT = createParseNode("top_statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("top_statement",90, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // top_statement ::= T_NAMESPACE T_OPEN_CURLY_BRACES top_statement_list T_CLOSE_CURLY_BRACES 
            {
              ParseNode RESULT = createParseNode("top_statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("top_statement",90, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // top_statement ::= T_NAMESPACE namespace_name T_OPEN_CURLY_BRACES top_statement_list T_CLOSE_CURLY_BRACES 
            {
              ParseNode RESULT = createParseNode("top_statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 5, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("top_statement",90, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // top_statement ::= T_NAMESPACE namespace_name T_SEMICOLON 
            {
              ParseNode RESULT = createParseNode("top_statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("top_statement",90, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // top_statement ::= T_HALT_COMPILER T_OPEN_BRACES T_CLOSE_BRACES T_SEMICOLON 
            {
              ParseNode RESULT = createParseNode("top_statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 4, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("top_statement",90, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // top_statement ::= class_declaration_statement 
            {
              ParseNode RESULT = createParseNode("top_statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("top_statement",90, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // top_statement ::= function_declaration_statement 
            {
              ParseNode RESULT = createParseNode("top_statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("top_statement",90, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // top_statement ::= statement 
            {
              ParseNode RESULT = createParseNode("top_statement",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("top_statement",90, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // namespace_name ::= namespace_name T_NS_SEPARATOR T_STRING 
            {
              ParseNode RESULT = createParseNode("namespace_name",CUP$CUPParser$act_num, CUP$CUPParser$stack, 3, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("namespace_name",64, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // namespace_name ::= T_STRING 
            {
              ParseNode RESULT = createParseNode("namespace_name",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("namespace_name",64, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // top_statement_list ::= 
            {
              ParseNode RESULT = createParseNode("top_statement_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 0, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("top_statement_list",91, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // top_statement_list ::= top_statement_list top_statement 
            {
              ParseNode RESULT = createParseNode("top_statement_list",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("top_statement_list",91, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT = createParseNode("$START",CUP$CUPParser$act_num, CUP$CUPParser$stack, 2, CUP$CUPParser$top);
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		ParseNode start_val = (ParseNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		RESULT = start_val;
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CUPParser$parser.done_parsing();
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= top_statement_list 
            {
              ParseNode RESULT = createParseNode("S",CUP$CUPParser$act_num, CUP$CUPParser$stack, 1, CUP$CUPParser$top);
		 
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

