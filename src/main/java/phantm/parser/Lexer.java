/* The following code was generated by JFlex 1.4.3 on 21.03.13 17:06 */

/**
 * PHP 5.3 JFlex specification file
 * Based on a php4 version from Nenad Jovanovic */

package phantm.parser;

import java.util.*;
import java_cup.runtime.*;




/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 21.03.13 17:06 from the specification file
 * <tt>spec/php.jflex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_IN_SCRIPTING = 2;
  public static final int ST_NOWDOC = 10;
  public static final int ST_LOOKING_FOR_PROPERTY = 16;
  public static final int ST_SINGLE_QUOTE = 6;
  public static final int ST_ONE_LINE_COMMENT = 24;
  public static final int ST_COMMENT = 22;
  public static final int ST_BACKQUOTE = 8;
  public static final int ST_DOUBLE_QUOTES = 4;
  public static final int YYINITIAL = 0;
  public static final int ST_VAR_OFFSET = 20;
  public static final int ST_LOOKING_FOR_VARNAME = 18;
  public static final int ST_HEREDOC = 12;
  public static final int ST_END_HEREDOC = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\13\2\0\1\11\22\0\1\12\1\46\1\72\1\100"+
    "\1\65\1\52\1\53\1\77\1\62\1\63\1\50\1\45\1\57\1\4"+
    "\1\2\1\51\1\5\11\1\1\41\1\56\1\47\1\43\1\44\1\66"+
    "\1\67\1\31\1\7\1\22\1\16\1\3\1\17\1\33\1\30\1\14"+
    "\1\71\1\32\1\26\1\35\1\21\1\23\1\36\1\42\1\25\1\24"+
    "\1\15\1\20\1\40\1\27\1\6\1\34\1\10\1\60\1\70\1\61"+
    "\1\55\1\37\1\74\1\31\1\7\1\22\1\16\1\3\1\17\1\33"+
    "\1\30\1\14\1\71\1\32\1\26\1\35\1\21\1\23\1\36\1\42"+
    "\1\25\1\76\1\15\1\20\1\40\1\27\1\6\1\34\1\10\1\73"+
    "\1\54\1\75\1\64\201\10\uff00\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\14\0\2\1\1\2\1\3\1\4\1\5\1\6"+
    "\1\3\3\5\1\7\21\5\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\2\45\1\46\1\45\1\47\1\2\3\50\1\51"+
    "\1\52\3\53\1\54\1\55\1\56\1\57\1\60\2\61"+
    "\1\62\1\2\3\63\2\64\2\63\1\0\2\65\1\1"+
    "\1\66\1\0\1\67\6\5\1\70\1\71\1\72\1\0"+
    "\2\5\1\0\1\73\7\5\1\74\13\5\1\75\7\5"+
    "\1\76\7\5\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\1\106\1\107\1\106\1\110\1\0\1\111\1\112"+
    "\1\113\1\114\1\115\1\116\1\117\1\120\1\121\1\122"+
    "\12\0\1\123\2\0\1\124\2\0\1\123\1\125\1\126"+
    "\1\0\1\5\1\0\1\127\1\130\1\131\2\0\1\66"+
    "\1\0\7\5\1\3\1\132\1\5\1\0\5\5\1\133"+
    "\3\5\1\134\2\5\1\135\1\5\1\136\1\137\15\5"+
    "\1\140\15\5\1\141\1\142\1\143\1\144\1\145\2\0"+
    "\2\115\13\0\1\146\1\61\2\0\6\5\1\147\1\150"+
    "\1\5\1\151\23\5\1\152\4\5\1\153\3\5\1\154"+
    "\15\5\21\0\1\5\1\155\5\5\1\156\1\157\3\5"+
    "\1\160\1\5\1\161\2\5\1\162\2\5\1\163\2\5"+
    "\1\164\1\165\1\166\1\167\4\5\1\170\1\5\1\171"+
    "\2\5\1\172\12\5\2\173\7\0\1\174\7\0\1\175"+
    "\2\65\1\0\2\5\1\176\2\5\1\177\12\5\1\200"+
    "\1\201\1\202\2\5\1\203\1\204\12\5\5\0\1\205"+
    "\5\0\1\206\2\0\1\207\5\5\1\210\2\5\1\211"+
    "\1\212\1\5\1\213\2\5\1\214\1\5\1\215\1\5"+
    "\1\216\7\5\4\0\1\217\1\0\1\220\1\0\3\5"+
    "\1\221\4\5\1\222\1\5\1\223\1\5\1\224\1\5"+
    "\1\225\3\5\1\226\2\5\1\0\1\227\1\230\1\0"+
    "\2\5\1\231\1\232\3\5\1\233\1\5\1\234\2\5"+
    "\1\235\2\5\1\0\1\236\1\237\1\5\1\240\1\241"+
    "\4\5\1\242\1\0\5\5\1\0\1\243\1\244\1\245"+
    "\2\5\1\0\1\246\1\5\1\0\1\5\1\0\1\247"+
    "\15\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[588];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf"+
    "\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7"+
    "\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e\0\u07df"+
    "\0\u0820\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0965\0\u09a6\0\u09e7"+
    "\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef"+
    "\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u03cf\0\u03cf"+
    "\0\u03cf\0\u03cf\0\u0db6\0\u03cf\0\u03cf\0\u0df7\0\u0e38\0\u03cf"+
    "\0\u03cf\0\u0e79\0\u03cf\0\u03cf\0\u03cf\0\u0eba\0\u03cf\0\u03cf"+
    "\0\u0efb\0\u03cf\0\u0f3c\0\u0f7d\0\u0fbe\0\u03cf\0\u0efb\0\u0f3c"+
    "\0\u03cf\0\u03cf\0\u03cf\0\u0efb\0\u0f3c\0\u03cf\0\u03cf\0\u0fff"+
    "\0\u03cf\0\u1040\0\u1081\0\u10c2\0\u03cf\0\u0df7\0\u1103\0\u1144"+
    "\0\u1185\0\u11c6\0\u03cf\0\u03cf\0\u1207\0\u1248\0\u1289\0\u12ca"+
    "\0\u130b\0\u134c\0\u138d\0\u03cf\0\u13ce\0\u140f\0\u1450\0\u1491"+
    "\0\u14d2\0\u1513\0\u03cf\0\u03cf\0\u03cf\0\u1554\0\u1595\0\u15d6"+
    "\0\u1617\0\u05d7\0\u1658\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d"+
    "\0\u17de\0\u05d7\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u1923\0\u1964"+
    "\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u05d7\0\u1aea\0\u1b2b"+
    "\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u05d7\0\u1cb1\0\u1cf2"+
    "\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u03cf\0\u1e78\0\u03cf"+
    "\0\u03cf\0\u1eb9\0\u03cf\0\u03cf\0\u1efa\0\u03cf\0\u03cf\0\u1f3b"+
    "\0\u1f7c\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u1fbd\0\u03cf\0\u03cf"+
    "\0\u03cf\0\u03cf\0\u03cf\0\u1ffe\0\u0db6\0\u203f\0\u2080\0\u20c1"+
    "\0\u2102\0\u2143\0\u2184\0\u21c5\0\u2206\0\u2247\0\u0e79\0\u2288"+
    "\0\u03cf\0\u0eba\0\u22c9\0\u230a\0\u03cf\0\u03cf\0\u234b\0\u03cf"+
    "\0\u238c\0\u03cf\0\u03cf\0\u03cf\0\u23cd\0\u240e\0\u244f\0\u244f"+
    "\0\u2490\0\u24d1\0\u2512\0\u2553\0\u2594\0\u25d5\0\u2616\0\u1554"+
    "\0\u05d7\0\u2657\0\u2698\0\u26d9\0\u271a\0\u275b\0\u279c\0\u27dd"+
    "\0\u05d7\0\u281e\0\u285f\0\u28a0\0\u05d7\0\u28e1\0\u2922\0\u2963"+
    "\0\u29a4\0\u05d7\0\u05d7\0\u29e5\0\u2a26\0\u2a67\0\u2aa8\0\u2ae9"+
    "\0\u2b2a\0\u2b6b\0\u2bac\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1"+
    "\0\u05d7\0\u2d32\0\u2d73\0\u2db4\0\u2df5\0\u2e36\0\u2e77\0\u2eb8"+
    "\0\u2ef9\0\u2f3a\0\u2f7b\0\u2fbc\0\u2ffd\0\u303e\0\u05d7\0\u03cf"+
    "\0\u03cf\0\u03cf\0\u03cf\0\u307f\0\u30c0\0\u3101\0\u03cf\0\u3142"+
    "\0\u3183\0\u31c4\0\u3205\0\u3246\0\u3287\0\u32c8\0\u3309\0\u334a"+
    "\0\u338b\0\u33cc\0\u03cf\0\u238c\0\u340d\0\u344e\0\u348f\0\u34d0"+
    "\0\u3511\0\u3552\0\u3593\0\u35d4\0\u05d7\0\u3615\0\u3656\0\u05d7"+
    "\0\u3697\0\u36d8\0\u3719\0\u375a\0\u379b\0\u37dc\0\u381d\0\u385e"+
    "\0\u389f\0\u38e0\0\u3921\0\u3962\0\u39a3\0\u39e4\0\u3a25\0\u3a66"+
    "\0\u3aa7\0\u3ae8\0\u3b29\0\u05d7\0\u3b6a\0\u3bab\0\u3bec\0\u3c2d"+
    "\0\u05d7\0\u3c6e\0\u3caf\0\u3cf0\0\u05d7\0\u3d31\0\u3d72\0\u3db3"+
    "\0\u3df4\0\u3e35\0\u3e76\0\u3eb7\0\u3ef8\0\u3f39\0\u3f7a\0\u3fbb"+
    "\0\u3ffc\0\u403d\0\u407e\0\u40bf\0\u4100\0\u4141\0\u4182\0\u41c3"+
    "\0\u4204\0\u4245\0\u4286\0\u42c7\0\u4308\0\u4349\0\u438a\0\u43cb"+
    "\0\u440c\0\u444d\0\u448e\0\u44cf\0\u05d7\0\u4510\0\u4551\0\u4592"+
    "\0\u45d3\0\u4614\0\u05d7\0\u05d7\0\u4655\0\u4696\0\u46d7\0\u05d7"+
    "\0\u4718\0\u05d7\0\u4759\0\u479a\0\u05d7\0\u47db\0\u481c\0\u05d7"+
    "\0\u485d\0\u489e\0\u05d7\0\u05d7\0\u05d7\0\u05d7\0\u48df\0\u4920"+
    "\0\u4961\0\u49a2\0\u05d7\0\u49e3\0\u05d7\0\u4a24\0\u4a65\0\u05d7"+
    "\0\u4aa6\0\u4ae7\0\u4b28\0\u4b69\0\u4baa\0\u4beb\0\u4c2c\0\u4c6d"+
    "\0\u4cae\0\u4cef\0\u4d30\0\u03cf\0\u4d71\0\u4db2\0\u4df3\0\u4e34"+
    "\0\u4e75\0\u4eb6\0\u4ef7\0\u03cf\0\u4f38\0\u4f79\0\u4fba\0\u4ffb"+
    "\0\u503c\0\u507d\0\u50be\0\u03cf\0\u50ff\0\u03cf\0\u5140\0\u5181"+
    "\0\u51c2\0\u5203\0\u5244\0\u5285\0\u05d7\0\u52c6\0\u5307\0\u5348"+
    "\0\u5389\0\u53ca\0\u540b\0\u544c\0\u548d\0\u54ce\0\u550f\0\u05d7"+
    "\0\u05d7\0\u05d7\0\u5550\0\u5591\0\u05d7\0\u05d7\0\u55d2\0\u5613"+
    "\0\u5654\0\u5695\0\u56d6\0\u5717\0\u5758\0\u5799\0\u57da\0\u581b"+
    "\0\u585c\0\u589d\0\u58de\0\u591f\0\u5960\0\u03cf\0\u59a1\0\u59e2"+
    "\0\u5a23\0\u5a64\0\u5aa5\0\u03cf\0\u5ae6\0\u5b27\0\u05d7\0\u5b68"+
    "\0\u5ba9\0\u5bea\0\u5c2b\0\u5c6c\0\u5cad\0\u5cee\0\u5d2f\0\u05d7"+
    "\0\u05d7\0\u5d70\0\u05d7\0\u5db1\0\u5df2\0\u5e33\0\u5e74\0\u05d7"+
    "\0\u5eb5\0\u05d7\0\u5ef6\0\u5f37\0\u5f78\0\u5fb9\0\u5ffa\0\u603b"+
    "\0\u607c\0\u60bd\0\u60fe\0\u613f\0\u6180\0\u03cf\0\u61c1\0\u03cf"+
    "\0\u6202\0\u6243\0\u6284\0\u62c5\0\u05d7\0\u6306\0\u6347\0\u6388"+
    "\0\u63c9\0\u05d7\0\u640a\0\u05d7\0\u644b\0\u05d7\0\u648c\0\u05d7"+
    "\0\u64cd\0\u650e\0\u654f\0\u05d7\0\u6590\0\u65d1\0\u6612\0\u03cf"+
    "\0\u03cf\0\u6653\0\u6694\0\u66d5\0\u05d7\0\u05d7\0\u6716\0\u6757"+
    "\0\u6798\0\u05d7\0\u67d9\0\u05d7\0\u681a\0\u685b\0\u05d7\0\u689c"+
    "\0\u68dd\0\u691e\0\u05d7\0\u05d7\0\u695f\0\u05d7\0\u05d7\0\u69a0"+
    "\0\u69e1\0\u6a22\0\u6a63\0\u05d7\0\u6aa4\0\u6ae5\0\u6b26\0\u6b67"+
    "\0\u6ba8\0\u6be9\0\u6c2a\0\u05d7\0\u05d7\0\u05d7\0\u6c6b\0\u6cac"+
    "\0\u6ced\0\u05d7\0\u6d2e\0\u6d6f\0\u6db0\0\u6df1\0\u05d7\0\u6e32"+
    "\0\u6e73\0\u6eb4\0\u6ef5\0\u6f36\0\u6f77\0\u6fb8\0\u6ff9\0\u703a"+
    "\0\u707b\0\u70bc\0\u70fd\0\u713e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[588];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\47\16\1\17\31\16\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\3\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\30\1\46\1\30\1\47\2\30\1\50\1\51"+
    "\1\52\1\53\1\30\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\30\1\102\1\103\1\104\1\105\1\42\1\106"+
    "\1\107\65\110\1\111\4\110\1\112\1\113\5\110\70\114"+
    "\1\115\6\114\1\112\1\114\65\116\1\117\5\116\1\120"+
    "\1\121\4\116\101\122\65\123\1\124\5\123\1\125\5\123"+
    "\101\126\3\127\1\130\2\127\3\130\3\127\25\130\1\127"+
    "\1\130\26\127\1\130\4\127\1\130\2\127\3\131\1\132"+
    "\2\131\3\132\3\131\25\132\1\131\1\132\26\131\1\132"+
    "\4\131\1\132\2\131\1\20\1\133\1\20\1\30\1\20"+
    "\1\134\3\30\3\20\25\30\1\20\1\30\15\20\1\71"+
    "\1\135\3\20\1\136\3\20\1\30\4\20\1\30\2\20"+
    "\50\137\1\140\30\137\11\141\1\142\1\141\1\143\30\141"+
    "\1\144\5\141\1\145\13\141\1\145\12\141\47\16\1\146"+
    "\100\16\1\0\2\16\1\147\13\16\1\150\7\16\1\151"+
    "\2\16\102\0\1\21\1\152\1\153\1\0\1\21\74\0"+
    "\1\152\3\0\1\152\35\0\1\154\36\0\1\30\1\0"+
    "\1\30\1\0\1\30\1\155\2\30\3\0\5\30\1\156"+
    "\1\157\3\30\1\160\6\30\1\161\2\30\1\162\1\0"+
    "\1\30\26\0\1\30\4\0\1\30\6\0\1\163\36\0"+
    "\1\164\1\165\35\0\1\21\1\152\1\153\1\0\1\21"+
    "\1\166\73\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\7\30\1\167\15\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\11\30\1\170\13\30\1\0\1\30\4\0\1\171\21\0"+
    "\1\30\1\102\3\0\1\30\1\106\2\0\1\30\1\0"+
    "\1\30\1\0\4\30\3\0\25\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\13\0\3\31\66\0\1\30\1\0"+
    "\1\30\1\0\4\30\3\0\3\30\1\172\1\30\1\173"+
    "\2\30\1\174\10\30\1\175\3\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\174\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\11\30\1\176\2\30\1\177\10\30\1\0"+
    "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"+
    "\1\200\1\0\4\30\3\0\1\201\6\30\1\202\15\30"+
    "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\3\0\1\203\3\30\1\204"+
    "\2\30\1\205\15\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\5\30\1\206\2\30\1\207\14\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\207\3\0\1\30\1\0\1\210\1\0"+
    "\4\30\3\0\15\30\1\211\7\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\3\30\1\212\3\30\1\213\2\30\1\214"+
    "\2\30\1\215\7\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\11\30\1\216\13\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\1\30\1\217\11\30\1\220\11\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\221\1\0"+
    "\4\30\3\0\25\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\1\222\24\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\14\30"+
    "\1\223\10\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\2\30\1\224\1\30"+
    "\3\0\5\30\1\225\2\30\1\226\1\227\13\30\1\0"+
    "\1\30\26\0\1\30\4\0\1\226\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\3\0\7\30\1\230\2\30\1\231"+
    "\12\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\3\0\4\30\1\232"+
    "\4\30\1\233\13\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\23\30\1\234\1\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\15\30\1\235\7\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\43\0\1\236\102\0\1\237\1\240\77\0\1\241"+
    "\1\242\77\0\1\243\1\0\1\244\76\0\1\245\100\0"+
    "\1\246\1\247\2\0\1\250\1\0\1\251\72\0\1\252"+
    "\100\0\1\253\4\0\1\254\1\107\72\0\1\255\1\256"+
    "\77\0\1\257\7\0\1\260\70\0\1\261\10\0\1\262"+
    "\67\0\1\263\44\0\1\264\2\0\1\265\1\0\1\266"+
    "\1\0\1\267\1\270\1\271\2\0\1\272\1\273\1\274"+
    "\3\0\1\275\44\0\1\273\5\0\1\276\2\0\3\276"+
    "\3\0\25\276\1\0\1\276\26\0\1\276\4\0\1\276"+
    "\46\0\1\256\34\0\65\277\1\0\2\277\1\300\1\277"+
    "\1\301\6\277\70\302\1\303\6\302\1\301\1\302\3\0"+
    "\1\304\2\0\3\304\3\0\25\304\1\0\1\304\26\0"+
    "\1\304\1\0\1\305\2\0\1\304\67\0\1\306\13\0"+
    "\70\114\1\307\6\114\1\0\71\114\1\310\6\114\1\310"+
    "\1\114\1\0\1\130\1\0\1\130\1\0\4\130\3\0"+
    "\25\130\1\0\1\130\26\0\1\130\4\0\1\130\3\0"+
    "\1\132\1\0\1\132\1\0\4\132\3\0\25\132\1\0"+
    "\1\132\26\0\1\132\4\0\1\132\3\0\1\133\3\0"+
    "\1\133\74\0\1\133\3\0\1\133\1\311\72\0\50\137"+
    "\1\0\30\137\51\0\1\312\27\0\11\141\1\0\1\141"+
    "\1\0\30\141\1\0\5\141\1\0\13\141\1\0\12\141"+
    "\13\0\1\143\131\0\1\313\34\0\47\16\1\0\2\16"+
    "\1\0\13\16\1\0\7\16\1\0\2\16\43\0\1\314"+
    "\73\0\1\315\4\0\1\314\57\0\1\316\57\0\1\152"+
    "\1\0\1\153\1\0\1\152\74\0\1\317\2\0\1\320"+
    "\1\317\37\0\1\320\34\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\1\321\1\322\23\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\2\30\1\323\22\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\14\30\1\324\10\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\10\30\1\325\14\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\325\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\22\30\1\326\2\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\15\30\1\327\7\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\330\1\0\1\330\1\0"+
    "\1\330\1\0\1\330\6\0\2\330\2\0\1\330\6\0"+
    "\1\330\50\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\11\30\1\331\13\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\332\1\0\4\30\3\0"+
    "\25\30\1\0\1\30\26\0\1\30\4\0\1\30\51\0"+
    "\1\333\32\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\1\30\1\334\4\30\1\335\1\30\1\336\14\30\1\0"+
    "\1\30\26\0\1\30\4\0\1\336\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\3\0\10\30\1\337\14\30\1\0"+
    "\1\30\26\0\1\30\4\0\1\337\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\3\0\22\30\1\340\2\30\1\0"+
    "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\3\0\20\30\1\341\4\30\1\0"+
    "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\3\0\11\30\1\342\13\30\1\0"+
    "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\3\0\3\30\1\343\2\30\1\344"+
    "\16\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0"+
    "\1\30\1\0\1\345\1\0\4\30\3\0\25\30\1\0"+
    "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\3\0\5\30\1\346\17\30\1\0"+
    "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\3\0\5\30\1\347\17\30\1\0"+
    "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\3\0\11\30\1\350\13\30\1\0"+
    "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\3\0\10\30\1\351\14\30\1\0"+
    "\1\30\26\0\1\30\4\0\1\351\3\0\1\30\1\0"+
    "\1\352\1\0\4\30\3\0\25\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\13\30\1\353\11\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\21\30\1\354\3\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\4\30\1\204\20\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\5\30\1\355\17\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\7\30\1\356\5\30\1\357\7\30\1\0"+
    "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\3\0\1\30\1\360\6\30\1\361"+
    "\14\30\1\0\1\30\26\0\1\30\4\0\1\361\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\3\0\15\30\1\362"+
    "\7\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\3\0\1\363\24\30"+
    "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\3\0\1\30\1\364\23\30"+
    "\1\0\1\365\26\0\1\30\4\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\3\0\10\30\1\366\14\30"+
    "\1\0\1\30\26\0\1\30\4\0\1\366\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\3\0\1\367\24\30\1\0"+
    "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\3\0\10\30\1\370\14\30\1\0"+
    "\1\30\26\0\1\30\4\0\1\370\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\3\0\2\30\1\371\22\30\1\0"+
    "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\3\0\11\30\1\372\13\30\1\0"+
    "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\3\0\1\30\1\373\23\30\1\0"+
    "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\3\0\7\30\1\374\15\30\1\0"+
    "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\2\30\1\375\1\30\3\0\25\30\1\0"+
    "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\3\0\1\376\6\30\1\377\15\30"+
    "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\3\0\2\30\1\u0100\1\u0101"+
    "\1\30\1\u0102\1\u0103\3\30\1\u0104\1\30\1\u0105\4\30"+
    "\1\u0106\3\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\11\30"+
    "\1\u0107\13\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\45\0\1\u0108\100\0\1\u0109\100\0\1\u010a\100\0\1\u010b"+
    "\3\0\1\u010c\55\0\1\u010d\51\0\1\u010d\13\0\1\u010e"+
    "\1\0\1\u010f\101\0\1\u0110\6\0\1\u0111\76\0\1\u0112"+
    "\102\0\1\u0113\103\0\1\u0114\73\0\1\u0115\66\0\1\u0116"+
    "\106\0\1\u0117\66\0\1\u0118\122\0\1\u0119\54\0\1\276"+
    "\1\0\1\276\1\0\4\276\3\0\25\276\1\0\1\276"+
    "\26\0\1\276\4\0\1\276\2\0\13\277\1\0\65\277"+
    "\13\302\1\0\65\302\1\0\1\304\1\0\1\304\1\u011a"+
    "\4\304\3\0\25\304\1\0\1\304\15\0\1\u011b\10\0"+
    "\1\304\4\0\1\304\2\0\70\114\1\0\6\114\1\0"+
    "\1\114\1\0\1\u011c\1\0\1\u011c\1\0\1\u011c\1\0"+
    "\1\u011c\6\0\2\u011c\2\0\1\u011c\6\0\1\u011c\77\0"+
    "\1\u011d\75\0\1\u011e\54\0\1\317\3\0\1\317\74\0"+
    "\1\30\1\0\1\30\1\0\4\30\3\0\1\30\1\345"+
    "\23\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0"+
    "\1\30\1\0\1\u011f\1\0\4\30\3\0\25\30\1\0"+
    "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\3\0\1\u0120\1\30\1\u0121\1\u0122"+
    "\4\30\1\u0123\2\30\1\u0124\11\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\u0123\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\7\30\1\u0125\15\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\u0126\1\0"+
    "\4\30\3\0\25\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\1\30\1\u0127\23\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\12\30\1\u0128\12\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\15\30\1\u0129\7\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\51\0\1\u010c\32\0\1\30\1\0\1\u012a\1\0"+
    "\4\30\3\0\25\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\12\30\1\u012b\12\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\1\30\1\u012c\23\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\u012d\1\0\4\30\3\0"+
    "\25\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\3\0\12\30\1\u012e"+
    "\12\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\3\0\7\30\1\u012f"+
    "\15\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\3\0\15\30\1\u0130"+
    "\7\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\3\0\12\30\1\u0131"+
    "\12\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\3\0\15\30\1\u0132"+
    "\7\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\3\0\6\30\1\u0133"+
    "\16\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0"+
    "\1\30\1\0\1\u0134\1\0\4\30\3\0\25\30\1\0"+
    "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"+
    "\1\u0135\1\0\4\30\3\0\25\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\u0136\1\0"+
    "\4\30\3\0\25\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\1\30\1\u0137\6\30\1\u0138\14\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\u0138\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\5\30\1\u0139\17\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\10\30\1\u013a\14\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\u013a\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\6\30\1\u013b\16\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\u013c\1\0"+
    "\4\30\3\0\25\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\1\30\1\u013d\23\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\1\30\1\u013e\23\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\4\30\1\u013f\20\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\4\30\1\u0140\20\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\1\30\1\u0141\23\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\12\30\1\u0142\12\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\1\30\1\u0143\23\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\15\30\1\u0144\7\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\7\30\1\u0145\15\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\2\30\1\u0146"+
    "\1\30\3\0\25\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\12\30\1\u0147\12\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\5\30\1\u0148\16\30\1\u0149\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\1\30\1\u014a\23\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\1\u014b\24\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\1\u014c\3\30\1\u014d\20\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\15\30\1\u014e\7\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\12\30\1\u014f\12\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\1\u0150\24\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\15\30\1\u0151\7\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\u0152\1\0\4\30\3\0"+
    "\25\30\1\0\1\30\26\0\1\30\4\0\1\30\5\0"+
    "\1\u0153\2\0\3\u0153\1\0\1\u010c\1\0\25\u0153\1\0"+
    "\1\u0153\26\0\1\u0153\1\u0154\3\0\1\u0153\1\u0155\23\0"+
    "\1\u0156\71\0\1\u010f\106\0\1\u0157\102\0\1\u0158\72\0"+
    "\1\u0159\103\0\1\u015a\103\0\1\u015b\101\0\1\u015c\51\0"+
    "\1\u015c\73\0\1\u015d\34\0\1\u015e\104\0\1\u015f\74\0"+
    "\1\u0160\117\0\1\u0161\72\0\1\u0162\56\0\1\u0163\65\0"+
    "\1\30\1\0\1\30\1\0\4\30\3\0\5\30\1\u0164"+
    "\17\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\3\0\3\30\1\u0165"+
    "\21\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0"+
    "\1\30\1\0\1\u0166\1\0\4\30\3\0\25\30\1\0"+
    "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\3\0\7\30\1\u0167\15\30\1\0"+
    "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\3\0\13\30\1\u0168\11\30\1\0"+
    "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\3\0\14\30\1\u0169\10\30\1\0"+
    "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\3\0\1\u016a\24\30\1\0\1\30"+
    "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\3\0\20\30\1\u016b\4\30\1\0\1\30"+
    "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\3\0\16\30\1\u016c\6\30\1\0\1\30"+
    "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\3\0\11\30\1\u016d\13\30\1\0\1\30"+
    "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\3\0\4\30\1\u016e\20\30\1\0\1\30"+
    "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\3\0\15\30\1\u016f\7\30\1\0\1\30"+
    "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\3\0\1\30\1\u0170\23\30\1\0\1\30"+
    "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\u0171"+
    "\1\0\4\30\3\0\25\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\13\30\1\u0172\11\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\4\30\1\u0173\20\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\15\30\1\u0174\7\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\12\30\1\u0175\12\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\1\30\1\u0176\23\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\15\30\1\u0177\7\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\1\30\1\u0178\23\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\10\30\1\u0179\14\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\u0179\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\1\u017a\24\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\1\30\1\u017b\23\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\u017c\1\0\4\30\3\0"+
    "\25\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\3\0\10\30\1\u017d"+
    "\14\30\1\0\1\30\26\0\1\30\4\0\1\u017d\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\3\0\14\30\1\u017e"+
    "\10\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\3\0\1\u017f\24\30"+
    "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\3\0\6\30\1\u0180\16\30"+
    "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\3\0\11\30\1\u0181\13\30"+
    "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\3\0\1\u0182\24\30\1\0"+
    "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"+
    "\1\u0183\1\0\4\30\3\0\25\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\11\30\1\u0184\13\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\20\30\1\u0185\4\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\15\30\1\u0186\7\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\1\u0187\24\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\1\30\1\u0188\23\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\15\30\1\u0189\7\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\u018a\1\0\4\30"+
    "\3\0\25\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\11\30"+
    "\1\u018b\13\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\12\30"+
    "\1\u018c\12\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\5\30"+
    "\1\u018d\17\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\21\30"+
    "\1\u018e\3\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\15\30"+
    "\1\u018f\7\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\5\30"+
    "\1\u0190\17\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\12\30"+
    "\1\u0191\12\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\1\30"+
    "\1\u0192\23\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\3\0\1\u0153\1\0\1\u0153\1\0\4\u0153\1\u0193\1\0"+
    "\1\u0194\25\u0153\1\0\1\u0153\26\0\1\u0153\4\0\1\u0153"+
    "\5\0\1\u0195\2\0\3\u0195\3\0\25\u0195\1\0\1\u0195"+
    "\26\0\1\u0195\4\0\1\u0195\5\0\1\u0196\2\0\3\u0196"+
    "\3\0\25\u0196\1\0\1\u0196\26\0\1\u0196\4\0\1\u0196"+
    "\27\0\1\u0197\104\0\1\u0198\75\0\1\u0199\55\0\1\u019a"+
    "\6\0\1\u019b\50\0\1\u019c\24\0\1\u019d\122\0\1\u019e"+
    "\52\0\1\u019f\100\0\1\u01a0\111\0\1\u01a1\112\0\1\u01a2"+
    "\103\0\1\u01a3\52\0\1\u01a4\2\0\3\u01a4\3\0\25\u01a4"+
    "\1\0\1\u01a4\26\0\1\u01a4\4\0\1\u01a4\13\0\1\u01a5"+
    "\2\u01a6\123\0\1\u01a7\43\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\2\30\1\u01a8\22\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\6\30\1\u01a9\16\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\11\30\1\u01aa\13\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\1\u01ab\24\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\1\u01ac\24\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\3\30\1\u01ad\21\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\3\30\1\u01ae\21\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\2\30\1\u01af\22\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\5\30\1\u01b0\17\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\21\30\1\u01b1\3\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\12\30\1\u01b2\12\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\11\30\1\u01b3\13\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\1\u01b4\24\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\6\30"+
    "\1\u01b5\16\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\22\30"+
    "\1\u01b6\2\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\5\30"+
    "\1\u01b7\17\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\6\30"+
    "\1\u01b8\16\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\14\30"+
    "\1\u01b9\10\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\5\30"+
    "\1\u01ba\17\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\11\30"+
    "\1\u01bb\13\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\15\30"+
    "\1\u01bc\7\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\12\30"+
    "\1\u01bd\12\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\6\30"+
    "\1\u01be\16\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\1\30"+
    "\1\u01bf\23\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\6\30"+
    "\1\u01c0\16\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\23\30"+
    "\1\u01c1\1\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\3\0\1\30\1\0\1\u01c2\1\0\4\30\3\0\25\30"+
    "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\3\0\6\30\1\u01c3\16\30"+
    "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30"+
    "\1\0\1\u01c4\1\0\4\30\3\0\25\30\1\0\1\30"+
    "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\3\0\10\30\1\u01c5\14\30\1\0\1\30"+
    "\26\0\1\30\4\0\1\u01c5\3\0\1\30\1\0\1\u01c6"+
    "\1\0\4\30\3\0\25\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\1\30\1\u01c7\23\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\14\30\1\u01c8\10\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\15\0\1\u0194\66\0\1\u0195\1\0\1\u0195"+
    "\1\0\4\u0195\3\0\25\u0195\1\0\1\u0195\26\0\1\u0195"+
    "\1\u01c9\3\0\1\u0195\3\0\1\u0196\1\0\1\u0196\1\0"+
    "\4\u0196\3\0\25\u0196\1\0\1\u0196\26\0\1\u0196\4\0"+
    "\1\u0196\1\u01c9\15\0\1\u01ca\111\0\1\u01cb\56\0\1\u01cc"+
    "\6\0\1\u01cd\50\0\1\u01ce\50\0\1\u01cf\57\0\1\u019b"+
    "\50\0\1\u019c\43\0\1\u01d0\67\0\1\u01a2\100\0\1\u01d1"+
    "\105\0\1\u01d2\77\0\1\u01d3\71\0\1\u01a2\50\0\1\u01d4"+
    "\51\0\1\u01d5\57\0\1\u01a6\102\0\1\u01d6\64\0\1\30"+
    "\1\0\1\30\1\0\4\30\3\0\10\30\1\u01d7\14\30"+
    "\1\0\1\30\26\0\1\30\4\0\1\u01d7\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\3\0\12\30\1\u01d8\12\30"+
    "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30"+
    "\1\0\1\u01d9\1\0\4\30\3\0\25\30\1\0\1\30"+
    "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\3\0\1\30\1\u01da\23\30\1\0\1\30"+
    "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\3\0\12\30\1\u01db\12\30\1\0\1\30"+
    "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\3\0\15\30\1\u01dc\7\30\1\0\1\30"+
    "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\u01dd"+
    "\1\0\4\30\3\0\25\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\6\30\1\u01de\16\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\u01df\1\0\4\30"+
    "\3\0\25\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\1\30"+
    "\1\u01e0\23\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\3\0\1\30\1\0\1\u01e1\1\0\4\30\3\0\25\30"+
    "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\3\0\7\30\1\u01e2\15\30"+
    "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\3\0\14\30\1\u01e3\10\30"+
    "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\3\0\15\30\1\u01e4\7\30"+
    "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\3\0\4\30\1\u01e5\20\30"+
    "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30"+
    "\1\0\1\u01e6\1\0\4\30\3\0\25\30\1\0\1\30"+
    "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\3\0\6\30\1\u01e7\16\30\1\0\1\30"+
    "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\u01e8"+
    "\1\0\4\30\3\0\25\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\1\30\1\u01e9\23\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\23\30\1\u01ea\1\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\23\30\1\u01eb\1\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\1\30\1\u01ec\23\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\10\30\1\u01ed\14\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\u01ed\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\10\30\1\u01ee\14\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\u01ee\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\23\30\1\u01ef\1\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\23\30\1\u01f0\1\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\7\30\1\u01f1\15\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\13\0\1\u0193\1\0\1\u0194\123\0\1\u01f2"+
    "\76\0\1\u01f3\75\0\1\u01f4\61\0\1\u01cd\50\0\1\u01ce"+
    "\20\0\1\u01f5\100\0\1\u01a2\107\0\1\u01d1\50\0\1\u01f6"+
    "\32\0\1\u01f7\116\0\1\u01f3\57\0\1\u01d5\50\0\1\u01f8"+
    "\26\0\3\u01f9\66\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\15\30\1\u01fa\7\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\15\30\1\u01fb\7\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\6\30\1\u01fc\16\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\u01fd\1\0\4\30"+
    "\3\0\25\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\6\30"+
    "\1\u01fe\16\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\23\30"+
    "\1\u01ff\1\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\3\0\1\30\1\0\1\u0200\1\0\4\30\3\0\25\30"+
    "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\3\0\5\30\1\u0201\17\30"+
    "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\3\0\5\30\1\u0202\17\30"+
    "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\3\0\6\30\1\u0203\16\30"+
    "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30"+
    "\1\0\1\u0204\1\0\4\30\3\0\25\30\1\0\1\30"+
    "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\3\0\23\30\1\u0205\1\30\1\0\1\30"+
    "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\3\0\1\30\1\u0206\23\30\1\0\1\30"+
    "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\u0207"+
    "\1\0\4\30\3\0\25\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\23\30\1\u0208\1\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\1\u0209\24\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\22\30\1\u020a\2\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\23\30\1\u020b\1\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\23\30\1\u020c\1\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\6\30\1\u020d\16\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\2\30\1\u020e\22\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\17\0\1\u020f\75\0\1\u01f3\50\0\1\u0210\36\0"+
    "\1\u01cd\104\0\1\u019b\65\0\1\u01f7\50\0\1\u0211\26\0"+
    "\3\u01f9\12\0\1\u0212\53\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\11\30\1\u0213\13\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\6\30\1\u0214\16\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\14\30\1\u0215\10\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\u0216\1\0"+
    "\4\30\3\0\25\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\7\30\1\u0217\15\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\7\30\1\u0218\15\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\1\30\1\u0219\23\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\u021a\1\0\4\30\3\0"+
    "\25\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\3\0\7\30\1\u021b"+
    "\15\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\3\0\2\30\1\u021c"+
    "\22\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\3\0\7\30\1\u021d"+
    "\15\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\3\0\15\30\1\u021e"+
    "\7\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\3\0\23\30\1\u021f"+
    "\1\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\3\0\7\30\1\u0220"+
    "\15\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\3\0\23\30\1\u0221"+
    "\1\30\1\0\1\30\26\0\1\30\4\0\1\30\13\0"+
    "\3\u020f\30\0\1\256\65\0\1\u0222\50\0\1\30\1\0"+
    "\1\u0223\1\0\4\30\3\0\25\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\14\30\1\u0224\10\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\5\30\1\u0225\17\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\3\30\1\u0226\21\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\10\30\1\u0227\14\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\u0227\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\5\30\1\u0228\17\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\5\30\1\u0229\17\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\6\30\1\u022a\16\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\21\30\1\u022b\3\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\23\30\1\u022c\1\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\23\0\1\u022d\60\0\1\30\1\0"+
    "\1\30\1\0\4\30\3\0\6\30\1\u022e\16\30\1\0"+
    "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\3\0\6\30\1\u022f\16\30\1\0"+
    "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\3\0\23\30\1\u0230\1\30\1\0"+
    "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"+
    "\1\u0231\1\0\4\30\3\0\25\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\3\0\22\30\1\u0232\2\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\35\0\1\u0233\46\0\1\30\1\0"+
    "\1\u0234\1\0\4\30\3\0\25\30\1\0\1\30\26\0"+
    "\1\30\4\0\1\30\3\0\1\30\1\0\1\u0235\1\0"+
    "\4\30\3\0\25\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\23\30\1\u0236\1\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\23\30\1\u0237\1\30\1\0\1\30\26\0\1\30\4\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"+
    "\1\u0238\24\30\1\0\1\30\26\0\1\30\4\0\1\30"+
    "\22\0\1\u0239\61\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\23\30\1\u023a\1\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\3\0\12\30\1\u023b\12\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\33\0\1\u023c\50\0\1\30\1\0\1\u023d"+
    "\1\0\4\30\3\0\25\30\1\0\1\30\26\0\1\30"+
    "\4\0\1\30\35\0\1\u023e\46\0\1\30\1\0\1\30"+
    "\1\0\4\30\3\0\11\30\1\u023f\13\30\1\0\1\30"+
    "\26\0\1\30\4\0\1\30\5\0\1\u0240\106\0\3\u0240"+
    "\27\0\1\u0241\46\0\3\u0241\22\0\1\u0242\33\0\1\u0243"+
    "\4\0\1\u0244\31\0\1\u0245\106\0\1\u0246\100\0\1\u0247"+
    "\100\0\1\u0248\72\0\1\u0249\100\0\1\u024a\61\0\3\u0248"+
    "\30\0\1\u01a6\72\0\1\u024b\100\0\1\u024c\134\0\1\u0248"+
    "\105\0\1\u0248\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[29055];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\14\0\2\1\1\11\46\1\4\11\1\1\2\11"+
    "\2\1\2\11\1\1\3\11\1\1\2\11\1\1\1\11"+
    "\3\1\1\11\2\1\3\11\2\1\2\11\1\1\1\11"+
    "\3\1\1\11\5\1\2\11\1\1\1\0\4\1\1\0"+
    "\1\11\6\1\3\11\1\0\2\1\1\0\44\1\1\11"+
    "\1\1\2\11\1\1\2\11\1\1\2\11\1\1\1\0"+
    "\4\11\1\1\5\11\12\0\1\1\2\0\1\11\2\0"+
    "\1\1\2\11\1\0\1\11\1\0\3\11\2\0\1\1"+
    "\1\0\12\1\1\0\54\1\4\11\2\0\1\1\1\11"+
    "\13\0\1\11\1\1\2\0\64\1\21\0\60\1\1\11"+
    "\7\0\1\11\7\0\1\11\1\1\1\11\1\0\41\1"+
    "\5\0\1\11\5\0\1\11\2\0\33\1\4\0\1\11"+
    "\1\0\1\11\1\0\25\1\1\0\2\11\1\0\17\1"+
    "\1\0\12\1\1\0\5\1\1\0\5\1\1\0\2\1"+
    "\1\0\1\1\1\0\1\1\15\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[588];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    private StringBuffer morePrefix;
    private boolean clearMorePrefix;

    public ArrayList<Comment> comments;

    public void registerComment() {
        Comment c = new Comment(yyline + 1, yycolumn, getFileName(), text());

        comments.add(c);
    }
    // same functionality as Flex's yymore()
    public void cleanMore() {
        this.morePrefix.setLength(0);
        this.clearMorePrefix = true;
    }
    public void more() {
        this.morePrefix.append(this.yytext());
        this.clearMorePrefix = false;
    }

    // wrapper around yytext() allowing the usage of more()
    public final String text() {
        return (this.morePrefix.toString() + this.yytext());
    }

    // wrapper around yylength() allowing the usage of more()
    public final int length() {
        return this.morePrefix.length() + this.yylength();
    }

    // wrapper around yycharat() allowing the usage of more()
    public final char charat(int pos) {
        if (pos < this.morePrefix.length()) {
            return this.morePrefix.charAt(pos);
        } else {
            return this.yycharat(pos - this.morePrefix.length());
        }
    }

    // wrapper around yylex() deleting the morePrefix
    public Symbol lex() throws java.io.IOException {
        Symbol ret = this.next_token();
        this.morePrefix.setLength(0);
        this.clearMorePrefix = true;
        return ret;
    }

    private LinkedList stateStack;

    private String heredocLabel;

    private String fileName;

    // same functionality as Flex's yy_push_state
    private void pushState(int state) {
        this.stateStack.add(new Integer(this.yystate()));
        yybegin(state);
    }

    // same functionality as Flex's yy_pop_state
    private void popState() {
        yybegin(((Integer) this.stateStack.removeLast()).intValue());
    }

    // same functionality as Flex's yy_top_state
    private int topState() {
        return ((Integer) this.stateStack.getLast()).intValue();
    }

    // shorthand for constructing Symbol objects
    private Symbol symbol(int type, String name) {
        return symbol(type, name, text());
    }

    private Symbol symbol(int type, String name, String content) {
        // use the Symbol's "left value" as line number
        int line = yyline + 1;
        return new Symbol(
            type, 
            line, 
            -1, 
            new ParseNode(type, name, content, line, yycolumn, getFileName()));
    }

    // always call this method after constructing the lexer object
    public void setFileName(String fileName) {
        this.fileName = fileName;
    }

    public String getFileName() {
        if (this.fileName == null) {
            throw new RuntimeException("fileName not set in lexer object");
        }
        return this.fileName;
    }

    public boolean isLabelStart(char c) {
        return ((c) >= 'a' && (c) <= 'z') || ((c) >= 'A' && (c) <= 'Z') || (c) == '_' || (c) >= 0x7F;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
  
    this.stateStack = new LinkedList();
    this.comments   = new ArrayList<Comment>();
    this.morePrefix = new StringBuffer();
    this.clearMorePrefix = true;

    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { return symbol(Symbols.T_STRING, "T_STRING");
          }
        case 168: break;
        case 121: 
          { return symbol(Symbols.T_ARRAY, "T_ARRAY");
          }
        case 169: break;
        case 93: 
          { return symbol(Symbols.T_FOR, "T_FOR");
          }
        case 170: break;
        case 71: 
          { return symbol(Symbols.T_IS_SMALLER_OR_EQUAL, "T_IS_SMALLER_OR_EQUAL");
          }
        case 171: break;
        case 161: 
          { return symbol(Symbols.T_IMPLEMENTS, "T_IMPLEMENTS");
          }
        case 172: break;
        case 11: 
          { return symbol(Symbols.T_PLUS, "T_PLUS");
          }
        case 173: break;
        case 124: 
          { return symbol(Symbols.T_INT_CAST, "T_INT_CAST");
          }
        case 174: break;
        case 33: 
          { yybegin(ST_BACKQUOTE);
    return symbol(Symbols.T_BACKTICK, "T_BACKTICK");
          }
        case 175: break;
        case 81: 
          { return symbol(Symbols.T_BOOLEAN_OR, "T_BOOLEAN_OR");
          }
        case 176: break;
        case 51: 
          { more();
          }
        case 177: break;
        case 52: 
          { registerComment();
    cleanMore();
	yybegin(ST_IN_SCRIPTING);
          }
        case 178: break;
        case 25: 
          { return symbol(Symbols.T_CLOSE_BRACES, "T_CLOSE_BRACES");
          }
        case 179: break;
        case 85: 
          { pushState(ST_LOOKING_FOR_VARNAME);
    return symbol(Symbols.T_DOLLAR_OPEN_CURLY_BRACES, "T_DOLLAR_OPEN_CURLY_BRACES");
          }
        case 180: break;
        case 129: 
          { return symbol(Symbols.T_SWITCH, "T_SWITCH");
          }
        case 181: break;
        case 50: 
          { popState();
    return symbol(Symbols.T_CLOSE_RECT_BRACES, "T_CLOSE_RECT_BRACES");
          }
        case 182: break;
        case 67: 
          { return symbol(Symbols.T_SR, "T_SR");
          }
        case 183: break;
        case 23: 
          { return symbol(Symbols.T_CLOSE_RECT_BRACES, "T_CLOSE_RECT_BRACES");
          }
        case 184: break;
        case 22: 
          { return symbol(Symbols.T_OPEN_RECT_BRACES, "T_OPEN_RECT_BRACES");
          }
        case 185: break;
        case 80: 
          { return symbol(Symbols.T_OR_EQUAL, "T_OR_EQUAL");
          }
        case 186: break;
        case 159: 
          { return symbol(Symbols.T_ENDFOREACH, "T_ENDFOREACH");
          }
        case 187: break;
        case 117: 
          { return symbol(Symbols.T_CLONE, "T_CLONE");
          }
        case 188: break;
        case 156: 
          { return symbol(Symbols.T_PROTECTED, "T_PROTECTED");
          }
        case 189: break;
        case 89: 
          { yybegin(ST_IN_SCRIPTING);
    //return new Yytoken("T_ECHO", text());
//    return symbol(Symbols.T_OPEN_TAG_WITH_ECHO, "T_OPEN_TAG_WITH_ECHO");
          }
        case 190: break;
        case 166: 
          { return symbol(Symbols.T_FUNC_C, "T_NS_C");
          }
        case 191: break;
        case 162: 
          { return symbol(Symbols.T_METHOD_C, "T_METHOD_C");
          }
        case 192: break;
        case 110: 
          { return symbol(Symbols.T_EMPTY, "T_EMPTY");
          }
        case 193: break;
        case 120: 
          { return symbol(Symbols.T_WHILE, "T_WHILE");
          }
        case 194: break;
        case 153: 
          { return symbol(Symbols.T_ENDSWITCH, "T_ENDSWITCH");
          }
        case 195: break;
        case 148: 
          { return symbol(Symbols.T_ABSTRACT, "T_ABSTRACT");
          }
        case 196: break;
        case 116: 
          { return symbol(Symbols.T_CONST, "T_CONST");
          }
        case 197: break;
        case 98: 
          { return symbol(Symbols.T_IS_IDENTICAL, "T_IS_IDENTICAL");
          }
        case 198: break;
        case 157: 
          { return symbol(Symbols.T_CLASS_C, "T_CLASS_C");
          }
        case 199: break;
        case 112: 
          { return symbol(Symbols.T_ISSET, "T_ISSET");
          }
        case 200: break;
        case 53: 
          { yybegin(ST_IN_SCRIPTING);
//    return symbol(Symbols.T_OPEN_TAG, "T_OPEN_TAG");
          }
        case 201: break;
        case 30: 
          { return symbol(Symbols.T_NS_SEPARATOR, "T_NS_SEPARATOR");
          }
        case 202: break;
        case 38: 
          { yybegin(ST_IN_SCRIPTING);
    return symbol(Symbols.T_DOUBLE_QUOTE, "T_DOUBLE_QUOTE");
          }
        case 203: break;
        case 109: 
          { return symbol(Symbols.T_ENDIF, "T_ENDIF");
          }
        case 204: break;
        case 65: 
          { return symbol(Symbols.T_DOUBLE_ARROW, "T_DOUBLE_ARROW");
          }
        case 205: break;
        case 56: 
          { return symbol(Symbols.T_DEC, "T_DEC");
          }
        case 206: break;
        case 147: 
          { return symbol(Symbols.T_CONTINUE, "T_CONTINUE");
          }
        case 207: break;
        case 155: 
          { return symbol(Symbols.T_NAMESPACE, "T_NAMESPACE");
          }
        case 208: break;
        case 103: 
          { return symbol(Symbols.T_ECHO, "T_ECHO");
          }
        case 209: break;
        case 119: 
          { return symbol(Symbols.T_CATCH, "T_CATCH");
          }
        case 210: break;
        case 150: 
          { return symbol(Symbols.T_LINE, "T_LINE");
          }
        case 211: break;
        case 6: 
          { return symbol(Symbols.T_MINUS, "T_MINUS");
          }
        case 212: break;
        case 136: 
          { return symbol(Symbols.T_INCLUDE, "T_INCLUDE");
          }
        case 213: break;
        case 43: 
          { if (zzMarkedPos > zzEndRead) {
        return null;
    }

    zzMarkedPos--;

    scanner:
    while(zzMarkedPos < zzEndRead) {
        switch(zzBuffer[zzMarkedPos++]) {
            case '\r':
                if (zzBuffer[zzMarkedPos] == '\n') {
                    zzMarkedPos++;
                }
                /* fall through */
            case '\n':
                /* Check for ending label on the next line */
                String label = "";
                int pos = zzMarkedPos;
                while(pos < zzEndRead && isLabelStart(zzBuffer[pos])) {
                    label = label + zzBuffer[pos];
                    pos++;
                }

                if (label.equals(this.heredocLabel)) {
                    if (pos < zzEndRead && zzBuffer[pos] == ';') {
                        pos++;
                    }

                    if (zzBuffer[pos] == '\r' || zzBuffer[pos] == '\n') {
                        yybegin(ST_END_HEREDOC);
                        break scanner;
                    }
                }
                zzMarkedPos = pos;

                continue;
            case '$':
                if (isLabelStart(zzBuffer[zzMarkedPos]) || zzBuffer[zzMarkedPos] == '{') {
                    break;
                }
                continue;
            case '{':
                if (zzBuffer[zzMarkedPos] == '$') {
                    break;
                }
                continue;
            case '\\':
                if (zzMarkedPos < zzEndRead && zzBuffer[zzMarkedPos] != '\n' && zzBuffer[zzMarkedPos] != '\r') {
                    zzMarkedPos++;
                }
                /* fall through */
            default:
                continue;
        }

        zzMarkedPos--;
        break;
    }
    return symbol(Symbols.T_ENCAPSED_AND_WHITESPACE, "T_ENCAPSED_AND_WHITESPACE");
          }
        case 214: break;
        case 47: 
          { yypushback(length());
	popState();
	pushState(ST_IN_SCRIPTING);
          }
        case 215: break;
        case 26: 
          { return symbol(Symbols.T_BITWISE_NOT, "T_BITWISE_NOT");
          }
        case 216: break;
        case 62: 
          { return symbol(Symbols.T_AS, "T_AS");
          }
        case 217: break;
        case 128: 
          { return symbol(Symbols.T_STATIC, "T_STATIC");
          }
        case 218: break;
        case 41: 
          { yybegin(ST_IN_SCRIPTING);
    return symbol(Symbols.T_BACKTICK, "T_BACKTICK");
          }
        case 219: break;
        case 72: 
          { return symbol(Symbols.T_SL, "T_SL");
          }
        case 220: break;
        case 75: 
          { yybegin(ST_COMMENT);
	more();
          }
        case 221: break;
        case 1: 
          { // NJ: replaced {1,400} by * (because it's faster)
    return symbol(Symbols.T_INLINE_HTML, "T_INLINE_HTML");
          }
        case 222: break;
        case 17: 
          { return symbol(Symbols.T_BITWISE_AND, "T_BITWISE_AND");
          }
        case 223: break;
        case 39: 
          { return symbol(Symbols.T_ENCAPSED_AND_WHITESPACE, "T_ENCAPSED_AND_WHITESPACE");
          }
        case 224: break;
        case 14: 
          { return symbol(Symbols.T_MULT, "T_MULT");
          }
        case 225: break;
        case 59: 
          { return symbol(Symbols.T_IF, "T_IF");
          }
        case 226: break;
        case 95: 
          { return symbol(Symbols.T_NEW, "T_NEW");
          }
        case 227: break;
        case 18: 
          { return symbol(Symbols.T_BITWISE_OR, "T_BITWISE_OR");
          }
        case 228: break;
        case 90: 
          { return symbol(Symbols.T_LOGICAL_XOR, "T_LOGICAL_XOR");
          }
        case 229: break;
        case 78: 
          { return symbol(Symbols.T_AND_EQUAL, "T_AND_EQUAL");
          }
        case 230: break;
        case 101: 
          { return symbol(Symbols.T_SL_EQUAL, "T_SL_EQUAL");
          }
        case 231: break;
        case 46: 
          { popState();
    return symbol(Symbols.T_STRING, "T_STRING");
          }
        case 232: break;
        case 94: 
          { return symbol(Symbols.T_USE, "T_USE");
          }
        case 233: break;
        case 88: 
          { registerComment();
    cleanMore();
    yypushback(2);
    yybegin(ST_IN_SCRIPTING);
          }
        case 234: break;
        case 143: 
          { return symbol(Symbols.T_UNSET_CAST, "T_UNSET_CAST");
          }
        case 235: break;
        case 141: 
          { return symbol(Symbols.T_PRIVATE, "T_PRIVATE");
          }
        case 236: break;
        case 55: 
          { return symbol(Symbols.T_CONCAT_EQUAL, "T_CONCAT_EQUAL");
          }
        case 237: break;
        case 13: 
          { return symbol(Symbols.T_IS_SMALLER, "T_IS_SMALLER");
          }
        case 238: break;
        case 76: 
          { return symbol(Symbols.T_MOD_EQUAL, "T_MOD_EQUAL");
          }
        case 239: break;
        case 138: 
          { return symbol(Symbols.T_DECLARE, "T_DECLARE");
          }
        case 240: break;
        case 111: 
          { return symbol(Symbols.T_BREAK, "T_BREAK");
          }
        case 241: break;
        case 63: 
          { return symbol(Symbols.T_DOUBLE_COLON, "T_DOUBLE_COLON");
          }
        case 242: break;
        case 42: 
          { if (zzMarkedPos > zzEndRead) {
        return null;
    }

    zzMarkedPos--;

    scanner:
    while(zzMarkedPos < zzEndRead) {
        switch(zzBuffer[zzMarkedPos++]) {
            case '\r':
                if (zzBuffer[zzMarkedPos] == '\n') {
                    zzMarkedPos++;
                }
                /* fall through */
            case '\n':
                /* Check for ending label on the next line */
                int pos = zzMarkedPos;
                String label = "";
                while(pos < zzEndRead && isLabelStart(zzBuffer[pos])) {
                    label = label + zzBuffer[pos];
                    pos++;
                }

                if (label.equals(this.heredocLabel)) {
                    if (pos < zzEndRead && zzBuffer[pos] == ';') {
                        pos++;
                    }

                    if (zzBuffer[pos] == '\r' || zzBuffer[pos] == '\n') {
                        yybegin(ST_END_HEREDOC);
                        break scanner;
                    }
                }
                zzMarkedPos = pos;
            default:
                continue;
        }
    }
    return symbol(Symbols.T_ENCAPSED_AND_WHITESPACE, "T_ENCAPSED_AND_WHITESPACE");
          }
        case 243: break;
        case 60: 
          { return symbol(Symbols.T_DO, "T_DO");
          }
        case 244: break;
        case 142: 
          { return symbol(Symbols.T_DIR, "T_DIR");
          }
        case 245: break;
        case 122: 
          { return symbol(Symbols.T_PRINT, "T_PRINT");
          }
        case 246: break;
        case 132: 
          { return symbol(Symbols.T_PUBLIC, "T_PUBLIC");
          }
        case 247: break;
        case 84: 
          { return symbol(Symbols.T_CONSTANT_ENCAPSED_STRING, "T_CONSTANT_ENCAPSED_STRING", text());
          }
        case 248: break;
        case 10: 
          { return symbol(Symbols.T_IS_GREATER, "T_IS_GREATER");
          }
        case 249: break;
        case 83: 
          { return symbol(Symbols.T_VARIABLE, "T_VARIABLE");
          }
        case 250: break;
        case 16: 
          { return symbol(Symbols.T_MODULO, "T_MODULO");
          }
        case 251: break;
        case 92: 
          { return symbol(Symbols.T_EXIT, "T_EXIT");
          }
        case 252: break;
        case 40: 
          { scanner:
    while(zzMarkedPos < zzEndRead) {
        switch(zzBuffer[zzMarkedPos-1]) {
            case '`':
                zzMarkedPos--;
                break scanner;
            case '$':
                if (zzBuffer[zzMarkedPos] == '{' || isLabelStart(zzBuffer[zzMarkedPos])) {
                    zzMarkedPos--;
                    break scanner;
                }
                break;
            case '{':
                if (zzBuffer[zzMarkedPos] == '$') {
                    zzMarkedPos--;
                    break scanner;
                }
                break;
            case '\\':
                zzMarkedPos++;
        }
        zzMarkedPos++;
    }

    return symbol(Symbols.T_ENCAPSED_AND_WHITESPACE, "T_ENCAPSED_AND_WHITESPACE");
          }
        case 253: break;
        case 130: 
          { return symbol(Symbols.T_RETURN, "T_RETURN");
          }
        case 254: break;
        case 140: 
          { return symbol(Symbols.T_REQUIRE, "T_REQUIRE");
          }
        case 255: break;
        case 37: 
          { scanner:
    while(zzMarkedPos < zzEndRead) {
        switch(zzBuffer[zzMarkedPos-1]) {
            case '"':
                zzMarkedPos--;
                break scanner;
            case '$':
                if (zzBuffer[zzMarkedPos] == '{' || isLabelStart(zzBuffer[zzMarkedPos])) {
                    zzMarkedPos--;
                    break scanner;
                }
                break;
            case '{':
                if (zzBuffer[zzMarkedPos] == '$') {
                    zzMarkedPos--;
                    break scanner;
                }
                break;
            case '\\':
                zzMarkedPos++;
        }
        zzMarkedPos++;
    }

    return symbol(Symbols.T_ENCAPSED_AND_WHITESPACE, "T_ENCAPSED_AND_WHITESPACE");
          }
        case 256: break;
        case 145: 
          { return symbol(Symbols.T_ENDWHILE, "T_ENDWHILE");
          }
        case 257: break;
        case 31: 
          { yybegin(ST_DOUBLE_QUOTES);
    return symbol(Symbols.T_DOUBLE_QUOTE, "T_DOUBLE_QUOTE");
          }
        case 258: break;
        case 36: 
          { yybegin(ST_ONE_LINE_COMMENT);
    more();
          }
        case 259: break;
        case 79: 
          { return symbol(Symbols.T_BOOLEAN_AND, "T_BOOLEAN_AND");
          }
        case 260: break;
        case 149: 
          { return symbol(Symbols.T_FILE, "T_FILE");
          }
        case 261: break;
        case 28: 
          { return symbol(Symbols.T_QUESTION, "T_QUESTION");
          }
        case 262: break;
        case 151: 
          { return symbol(Symbols.T_STRING_CAST, "T_STRING_CAST");
          }
        case 263: break;
        case 74: 
          { return symbol(Symbols.T_DIV_EQUAL, "T_DIV_EQUAL");
          }
        case 264: break;
        case 160: 
          { return symbol(Symbols.T_INSTANCEOF, "T_INSTANCEOF");
          }
        case 265: break;
        case 73: 
          { return symbol(Symbols.T_MUL_EQUAL, "T_MUL_EQUAL");
          }
        case 266: break;
        case 20: 
          { return symbol(Symbols.T_SEMICOLON, "T_SEMICOLON");
          }
        case 267: break;
        case 29: 
          { return symbol(Symbols.T_AT, "T_AT");
          }
        case 268: break;
        case 133: 
          { return symbol(Symbols.T_BOOL_CAST, "T_BOOL_CAST");
          }
        case 269: break;
        case 134: 
          { return symbol(Symbols.T_DOUBLE_CAST, "T_DOUBLE_CAST");
          }
        case 270: break;
        case 137: 
          { return symbol(Symbols.T_DEFAULT, "T_DEFAULT");
          }
        case 271: break;
        case 102: 
          { yypushback(1);
    pushState(ST_VAR_OFFSET);
    return symbol(Symbols.T_VARIABLE, "T_VARIABLE");
          }
        case 272: break;
        case 97: 
          { return symbol(Symbols.T_VAR, "T_VAR");
          }
        case 273: break;
        case 100: 
          { return symbol(Symbols.T_IS_NOT_IDENTICAL, "T_IS_NOT_IDENTICAL");
          }
        case 274: break;
        case 106: 
          { return symbol(Symbols.T_CASE, "T_CASE");
          }
        case 275: break;
        case 2: 
          { System.err.println("read ANY_CHAR at wrong place (state="+yystate()+"):");
    System.err.println("line " + yyline + ", column " + yycolumn);
    System.err.println("character: " + text());
    return null;
          }
        case 276: break;
        case 70: 
          { return symbol(Symbols.T_IS_NOT_EQUAL, "T_IS_NOT_EQUAL");
          }
        case 277: break;
        case 8: 
          { return symbol(Symbols.T_COLON, "T_COLON");
          }
        case 278: break;
        case 64: 
          { return symbol(Symbols.T_IS_EQUAL, "T_IS_EQUAL");
          }
        case 279: break;
        case 127: 
          { return symbol(Symbols.T_ELSEIF, "T_ELSEIF");
          }
        case 280: break;
        case 12: 
          { return symbol(Symbols.T_NOT, "T_NOT");
          }
        case 281: break;
        case 68: 
          { return symbol(Symbols.T_PLUS_EQUAL, "T_PLUS_EQUAL");
          }
        case 282: break;
        case 4: 
          { return symbol(Symbols.T_POINT, "T_POINT");
          }
        case 283: break;
        case 61: 
          { return symbol(Symbols.T_LOGICAL_OR, "T_LOGICAL_OR");
          }
        case 284: break;
        case 24: 
          { return symbol(Symbols.T_OPEN_BRACES, "T_OPEN_BRACES");
          }
        case 285: break;
        case 35: 
          { yybegin(ST_SINGLE_QUOTE);
    return symbol(Symbols.T_DOUBLE_QUOTE, "T_DOUBLE_QUOTE");
          }
        case 286: break;
        case 66: 
          { return symbol(Symbols.T_IS_GREATER_OR_EQUAL, "T_IS_GREATER_OR_EQUAL");
          }
        case 287: break;
        case 57: 
          { return symbol(Symbols.T_MINUS_EQUAL, "T_MINUS_EQUAL");
          }
        case 288: break;
        case 154: 
          { return symbol(Symbols.T_INTERFACE, "T_INTERFACE");
          }
        case 289: break;
        case 144: 
          { return symbol(Symbols.T_ARRAY_CAST, "T_ARRAY_CAST");
          }
        case 290: break;
        case 139: 
          { return symbol(Symbols.T_FOREACH, "T_FOREACH");
          }
        case 291: break;
        case 114: 
          { return symbol(Symbols.T_FINAL, "T_FINAL");
          }
        case 292: break;
        case 86: 
          { pushState(ST_IN_SCRIPTING);
    yypushback(1);
    return symbol(Symbols.T_CURLY_OPEN, "T_CURLY_OPEN");
          }
        case 293: break;
        case 21: 
          { return symbol(Symbols.T_COMMA, "T_COMMA");
          }
        case 294: break;
        case 58: 
          { pushState(ST_LOOKING_FOR_PROPERTY);
    return symbol(Symbols.T_OBJECT_OPERATOR, "T_OBJECT_OPERATOR");
          }
        case 295: break;
        case 99: 
          { return symbol(Symbols.T_SR_EQUAL, "T_SR_EQUAL");
          }
        case 296: break;
        case 107: 
          { return symbol(Symbols.T_LIST, "T_LIST");
          }
        case 297: break;
        case 158: 
          { return symbol(Symbols.T_ENDDECLARE, "T_ENDDECLARE");
          }
        case 298: break;
        case 69: 
          { return symbol(Symbols.T_INC, "T_INC");
          }
        case 299: break;
        case 19: 
          { return symbol(Symbols.T_BITWISE_XOR, "T_BITWISE_XOR");
          }
        case 300: break;
        case 167: 
          { return symbol(Symbols.T_HALT_COMPILER, "T_HALT_COMPILER");
          }
        case 301: break;
        case 165: 
          { return symbol(Symbols.T_FUNC_C, "T_FUNC_C");
          }
        case 302: break;
        case 77: 
          { yybegin(YYINITIAL);
    return symbol(Symbols.T_SEMICOLON, "T_SEMICOLON");
          }
        case 303: break;
        case 163: 
          { return symbol(Symbols.T_INCLUDE_ONCE, "T_INCLUDE_ONCE");
          }
        case 304: break;
        case 87: 
          { yybegin(ST_IN_SCRIPTING);
    registerComment();
    cleanMore();
          }
        case 305: break;
        case 3: 
          { return symbol(Symbols.T_LNUMBER, "T_LNUMBER");
          }
        case 306: break;
        case 146: 
          { return symbol(Symbols.T_FUNCTION, "T_FUNCTION");
          }
        case 307: break;
        case 113: 
          { return symbol(Symbols.T_THROW, "T_THROW");
          }
        case 308: break;
        case 7: 
          { // don't return this token, since the parser has no rule for it;
    // in the orignal PHP sources, this filtering is not performed inside
    // the lexer, but by a function that is located between the parser and
    // the lexer (this function has the name zendlex())
	// return T_WHITESPACE;
          }
        case 309: break;
        case 126: 
          { return symbol(Symbols.T_ENDFOR, "T_ENDFOR");
          }
        case 310: break;
        case 118: 
          { return symbol(Symbols.T_CLASS, "T_CLASS");
          }
        case 311: break;
        case 27: 
          { return symbol(Symbols.T_DOLLAR, "T_DOLLAR");
          }
        case 312: break;
        case 105: 
          { return symbol(Symbols.T_EVAL, "T_EVAL");
          }
        case 313: break;
        case 44: 
          { zzMarkedPos += this.heredocLabel.length()-1;
    yybegin(ST_IN_SCRIPTING);
    return symbol(Symbols.T_END_HEREDOC, "T_END_HEREDOC");
          }
        case 314: break;
        case 152: 
          { return symbol(Symbols.T_OBJECT_CAST, "T_OBJECT_CAST");
          }
        case 315: break;
        case 115: 
          { return symbol(Symbols.T_UNSET, "T_UNSET");
          }
        case 316: break;
        case 82: 
          { return symbol(Symbols.T_XOR_EQUAL, "T_XOR_EQUAL");
          }
        case 317: break;
        case 15: 
          { return symbol(Symbols.T_DIV, "T_DIV");
          }
        case 318: break;
        case 32: 
          { pushState(ST_IN_SCRIPTING);
    return symbol(Symbols.T_OPEN_CURLY_BRACES, "T_OPEN_CURLY_BRACES");
          }
        case 319: break;
        case 104: 
          { return symbol(Symbols.T_ELSE, "T_ELSE");
          }
        case 320: break;
        case 135: 
          { return symbol(Symbols.T_EXTENDS, "T_EXTENDS");
          }
        case 321: break;
        case 49: 
          { return symbol(Symbols.T_NUM_STRING, "T_NUM_STRING");
          }
        case 322: break;
        case 96: 
          { return symbol(Symbols.T_LOGICAL_AND, "T_LOGICAL_AND");
          }
        case 323: break;
        case 108: 
          { return symbol(Symbols.T_GOTO, "T_GOTO");
          }
        case 324: break;
        case 34: 
          { // TODO: could make problems
	// if (yy_start_stack_ptr) {
	//	yy_pop_state();
	// }
    
//    System.out.println("POPPING STATE!!!");
    popState();
    return symbol(Symbols.T_CLOSE_CURLY_BRACES, "T_CLOSE_CURLY_BRACES");
          }
        case 325: break;
        case 9: 
          { return symbol(Symbols.T_ASSIGN, "T_ASSIGN");
          }
        case 326: break;
        case 45: 
          { yypushback(length());
	popState();
          }
        case 327: break;
        case 164: 
          { return symbol(Symbols.T_REQUIRE_ONCE, "T_REQUIRE_ONCE");
          }
        case 328: break;
        case 54: 
          { return symbol(Symbols.T_DNUMBER, "T_DNUMBER");
          }
        case 329: break;
        case 131: 
          { return symbol(Symbols.T_GLOBAL, "T_GLOBAL");
          }
        case 330: break;
        case 125: 
          { yypushback(3);
    pushState(ST_LOOKING_FOR_PROPERTY);
    return symbol(Symbols.T_VARIABLE, "T_VARIABLE");
          }
        case 331: break;
        case 123: 
          { // start of heredoc/nowdoc
    int initPos = zzStartRead;
    int pos     = zzStartRead;
    int labelLength = length();

    if (text().startsWith("b")) {
        pos++;
        labelLength--;
    }

    // skip <<<
    pos += 3;

    if (text().endsWith("\r\n")) {
        labelLength -= 5; // <<< and \r\n
    } else {
        labelLength -= 4; // <<< and \n or \r
    }

    // skip spaces and tabs
    while(zzBuffer[pos] == ' ' || zzBuffer[pos] == '\t') {
        pos++;
        labelLength--;
    }

    if (zzBuffer[pos] == '\'') {
        pos++;
        yybegin(ST_NOWDOC);
        labelLength -= 2;
    } else {
        if (zzBuffer[pos] == '\"') {
            pos++;
            labelLength -= 2;
        }
        yybegin(ST_HEREDOC);
    }

    this.heredocLabel = text().substring((pos-initPos), (pos-initPos) + labelLength);

    // Check if it's directly in the next line
    if (labelLength < zzEndRead - zzMarkedPos) {
        int lpos = zzMarkedPos;

        String label = "";
        while(lpos < zzEndRead && isLabelStart(zzBuffer[lpos]) && lpos-zzMarkedPos <= labelLength) {
            label = label + zzBuffer[lpos];
            lpos++;
        }

        if (label.equals(this.heredocLabel)) {
            if (zzBuffer[lpos] == ';') {
                lpos++;
            }

            if (zzBuffer[lpos] == '\n' || zzBuffer[lpos] == '\r') {
                yybegin(ST_END_HEREDOC);
            }
        }

    }

    return symbol(Symbols.T_START_HEREDOC, "T_START_HEREDOC");
          }
        case 332: break;
        case 91: 
          { return symbol(Symbols.T_TRY, "T_TRY");
          }
        case 333: break;
        case 48: 
          { popState();
	pushState(ST_IN_SCRIPTING);
    return symbol(Symbols.T_STRING_VARNAME, "T_STRING_VARNAME");
          }
        case 334: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(Symbols.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
